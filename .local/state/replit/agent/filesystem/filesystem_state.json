{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Whispering Walls - Replit Project Guide\n\n## Overview\n\nWhispering Walls is an anonymous social platform designed for sharing short whispers, secrets, confessions, or thoughts in a safe and supportive environment. The application enables users to post anonymous messages (whispers) of up to 200 characters, browse and interact with community content through voting and replies, and connect through shared human experiences without revealing personal identity.\n\nThe platform emphasizes anonymity, empathy, and community support while providing robust moderation tools and content management features for administrators.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Full-Stack TypeScript Architecture\nThe application uses a modern full-stack TypeScript architecture with shared code between client and server:\n- **Frontend**: React 18 with Vite for fast development and building\n- **Backend**: Express.js with TypeScript for API endpoints\n- **Shared**: Common schemas and types using Zod validation\n- **Build System**: ESBuild for server bundling, Vite for client bundling\n\n### Frontend Architecture\n- **React SPA**: Single-page application using Wouter for lightweight routing\n- **State Management**: TanStack Query for server state and caching\n- **UI Framework**: Tailwind CSS with Radix UI components via shadcn/ui\n- **Component Structure**: Modular component architecture with reusable UI primitives\n- **Responsive Design**: Mobile-first approach with custom CSS variables for theming\n\n### Backend Architecture\n- **RESTful API**: Express.js server with typed route handlers\n- **Authentication**: Replit OIDC integration with session-based auth\n- **Rate Limiting**: Express rate limiting for whispers, replies, and votes\n- **Middleware**: Request logging, error handling, and authentication middleware\n- **File Organization**: Separate modules for routes, storage abstraction, and database connection\n\n### Database Design\n- **ORM**: Drizzle ORM with PostgreSQL dialect\n- **Database**: Neon PostgreSQL (serverless)\n- **Schema**: Comprehensive schema covering users, whispers, replies, tags, themes, votes, and moderation\n- **Relations**: Proper foreign key relationships between entities\n- **Migrations**: Drizzle Kit for database schema management\n\n### Core Data Models\n- **Users**: Basic user info for authenticated admin users\n- **Whispers**: Anonymous posts with mood/topic tags and voting\n- **Replies**: Threaded responses to whispers\n- **Tags**: Mood and topic categorization system\n- **Themes**: Time-based content themes for community engagement\n- **Votes**: Upvote/downvote system for content ranking\n- **Moderation**: Flagging and admin action tracking\n\n### Authentication & Authorization\n- **Anonymous Access**: No registration required for posting/browsing\n- **Admin Authentication**: Replit OIDC for admin panel access\n- **Session Management**: PostgreSQL-backed session storage\n- **Role-Based Access**: Admin-only routes and functionality\n- **Security**: CSRF protection and secure session handling\n\n### Content Management\n- **Anonymous Posting**: IP-based rate limiting without user tracking\n- **Voting System**: Session-based vote tracking to prevent duplicate votes\n- **Content Moderation**: Admin tools for managing whispers, replies, and users\n- **Tagging System**: Predefined mood and topic tags for content categorization\n- **Theme System**: Daily/weekly themed content campaigns\n\n### Development & Deployment\n- **Development**: Hot reload with Vite dev server and tsx for backend\n- **Production**: Static file serving with Express for SPA deployment\n- **Environment**: Replit-optimized with development mode detection\n- **Build Process**: Separate client and server build processes with proper asset handling","size_bytes":3794},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        midnight: \"var(--midnight)\",\n        coral: \"var(--coral)\",\n        lavender: \"var(--lavender)\",\n        \"cool-gray\": \"var(--cool-gray)\",\n        moonlight: \"var(--moonlight)\",\n        sidebar: {\n          DEFAULT: \"var(--sidebar)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n        poppins: [\"Poppins\", \"sans-serif\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n        fadeIn: {\n          from: {\n            opacity: \"0\",\n            transform: \"translateY(20px)\",\n          },\n          to: {\n            opacity: \"1\",\n            transform: \"translateY(0)\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n        \"fade-in\": \"fadeIn 0.5s ease-in\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":3250},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });","size_bytes":482},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/replitAuth.ts":{"content":"import * as client from \"openid-client\";\nimport { Strategy, type VerifyFunction } from \"openid-client/passport\";\n\nimport passport from \"passport\";\nimport session from \"express-session\";\nimport type { Express, RequestHandler } from \"express\";\nimport memoize from \"memoizee\";\nimport connectPg from \"connect-pg-simple\";\nimport { storage } from \"./storage\";\n\nif (!process.env.REPLIT_DOMAINS) {\n  throw new Error(\"Environment variable REPLIT_DOMAINS not provided\");\n}\n\nconst getOidcConfig = memoize(\n  async () => {\n    return await client.discovery(\n      new URL(process.env.ISSUER_URL ?? \"https://replit.com/oidc\"),\n      process.env.REPL_ID!\n    );\n  },\n  { maxAge: 3600 * 1000 }\n);\n\nexport function getSession() {\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\n  const pgStore = connectPg(session);\n  const sessionStore = new pgStore({\n    conString: process.env.DATABASE_URL,\n    createTableIfMissing: false,\n    ttl: sessionTtl,\n    tableName: \"sessions\",\n  });\n  return session({\n    secret: process.env.SESSION_SECRET!,\n    store: sessionStore,\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: true,\n      maxAge: sessionTtl,\n    },\n  });\n}\n\nfunction updateUserSession(\n  user: any,\n  tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers\n) {\n  user.claims = tokens.claims();\n  user.access_token = tokens.access_token;\n  user.refresh_token = tokens.refresh_token;\n  user.expires_at = user.claims?.exp;\n}\n\nasync function upsertUser(\n  claims: any,\n) {\n  await storage.upsertUser({\n    id: claims[\"sub\"],\n    email: claims[\"email\"],\n    firstName: claims[\"first_name\"],\n    lastName: claims[\"last_name\"],\n    profileImageUrl: claims[\"profile_image_url\"],\n  });\n}\n\nexport async function setupAuth(app: Express) {\n  app.set(\"trust proxy\", 1);\n  app.use(getSession());\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  const config = await getOidcConfig();\n\n  const verify: VerifyFunction = async (\n    tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers,\n    verified: passport.AuthenticateCallback\n  ) => {\n    const user = {};\n    updateUserSession(user, tokens);\n    await upsertUser(tokens.claims());\n    verified(null, user);\n  };\n\n  for (const domain of process.env\n    .REPLIT_DOMAINS!.split(\",\")) {\n    const strategy = new Strategy(\n      {\n        name: `replitauth:${domain}`,\n        config,\n        scope: \"openid email profile offline_access\",\n        callbackURL: `https://${domain}/api/callback`,\n      },\n      verify,\n    );\n    passport.use(strategy);\n  }\n\n  passport.serializeUser((user: Express.User, cb) => cb(null, user));\n  passport.deserializeUser((user: Express.User, cb) => cb(null, user));\n\n  app.get(\"/api/login\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      prompt: \"login consent\",\n      scope: [\"openid\", \"email\", \"profile\", \"offline_access\"],\n    })(req, res, next);\n  });\n\n  app.get(\"/api/callback\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      successReturnToOrRedirect: \"/\",\n      failureRedirect: \"/api/login\",\n    })(req, res, next);\n  });\n\n  app.get(\"/api/logout\", (req, res) => {\n    req.logout(() => {\n      res.redirect(\n        client.buildEndSessionUrl(config, {\n          client_id: process.env.REPL_ID!,\n          post_logout_redirect_uri: `${req.protocol}://${req.hostname}`,\n        }).href\n      );\n    });\n  });\n}\n\nexport const isAuthenticated: RequestHandler = async (req, res, next) => {\n  const user = req.user as any;\n\n  if (!req.isAuthenticated() || !user.expires_at) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n\n  const now = Math.floor(Date.now() / 1000);\n  if (now <= user.expires_at) {\n    return next();\n  }\n\n  const refreshToken = user.refresh_token;\n  if (!refreshToken) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n\n  try {\n    const config = await getOidcConfig();\n    const tokenResponse = await client.refreshTokenGrant(config, refreshToken);\n    updateUserSession(user, tokenResponse);\n    return next();\n  } catch (error) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n};\n","size_bytes":4221},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { setupAuth, isAuthenticated } from \"./replitAuth\";\nimport { insertWhisperSchema, insertReplySchema, insertMoodTagSchema, insertTopicTagSchema, insertThemeSchema, insertFlagSchema, insertVoteSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\nimport rateLimit from \"express-rate-limit\";\n\n// Rate limiters\nconst whisperLimiter = rateLimit({\n  windowMs: 60 * 60 * 1000, // 1 hour\n  max: 5, // 5 whispers per hour\n  message: { message: \"Too many whispers. Please wait before posting again.\" },\n  standardHeaders: true,\n  legacyHeaders: false,\n});\n\nconst replyLimiter = rateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 10, // 10 replies per 15 minutes\n  message: { message: \"Too many replies. Please wait before replying again.\" },\n  standardHeaders: true,\n  legacyHeaders: false,\n});\n\nconst voteLimiter = rateLimit({\n  windowMs: 1 * 60 * 1000, // 1 minute\n  max: 30, // 30 votes per minute\n  message: { message: \"Too many votes. Please slow down.\" },\n  standardHeaders: true,\n  legacyHeaders: false,\n});\n\n// Admin middleware\nconst isAdmin = async (req: any, res: any, next: any) => {\n  try {\n    const userId = req.user?.claims?.sub;\n    if (!userId) {\n      return res.status(401).json({ message: \"Unauthorized\" });\n    }\n    \n    const user = await storage.getUser(userId);\n    if (!user?.isAdmin) {\n      return res.status(403).json({ message: \"Admin access required\" });\n    }\n    \n    next();\n  } catch (error) {\n    console.error(\"Admin check error:\", error);\n    res.status(500).json({ message: \"Internal server error\" });\n  }\n};\n\nfunction getClientIP(req: any): string {\n  return req.headers['x-forwarded-for']?.split(',')[0] || \n         req.connection?.remoteAddress || \n         req.socket?.remoteAddress || \n         req.ip || \n         '127.0.0.1';\n}\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Auth middleware\n  await setupAuth(app);\n\n  // Seed initial data\n  try {\n    const moodTags = await storage.getMoodTags();\n    if (moodTags.length === 0) {\n      const defaultMoods = [\n        { name: \"Hope\", description: \"Feelings of optimism and expectation\" },\n        { name: \"Regret\", description: \"Feelings of sadness or disappointment\" },\n        { name: \"Fear\", description: \"Feelings of anxiety or worry\" },\n        { name: \"Joy\", description: \"Feelings of happiness and delight\" },\n        { name: \"Sadness\", description: \"Feelings of sorrow and melancholy\" },\n        { name: \"Love\", description: \"Feelings of affection and care\" },\n        { name: \"Anger\", description: \"Feelings of frustration and rage\" },\n      ];\n      \n      for (const mood of defaultMoods) {\n        await storage.createMoodTag(mood);\n      }\n    }\n\n    const topicTags = await storage.getTopicTags();\n    if (topicTags.length === 0) {\n      const defaultTopics = [\n        { name: \"Relationships\", description: \"Love, friendship, family dynamics\" },\n        { name: \"Work\", description: \"Career, job experiences, workplace\" },\n        { name: \"Family\", description: \"Family relationships and experiences\" },\n        { name: \"Dreams\", description: \"Aspirations, goals, and ambitions\" },\n        { name: \"Mental Health\", description: \"Emotional wellbeing and mental health\" },\n      ];\n      \n      for (const topic of defaultTopics) {\n        await storage.createTopicTag(topic);\n      }\n    }\n  } catch (error) {\n    console.error(\"Error seeding data:\", error);\n  }\n\n  // Auth routes\n  app.get('/api/auth/user', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      res.json(user);\n    } catch (error) {\n      console.error(\"Error fetching user:\", error);\n      res.status(500).json({ message: \"Failed to fetch user\" });\n    }\n  });\n\n  // Public API routes\n\n  // Get whispers with filtering\n  app.get('/api/whispers', async (req, res) => {\n    try {\n      const { mood, topic, theme, sort, search, page = \"1\", limit = \"12\" } = req.query;\n      \n      const filters = {\n        moodTagId: mood as string,\n        topicTagId: topic as string,\n        themeId: theme as string,\n        sort: sort as 'recent' | 'popular' | 'discussed',\n        search: search as string,\n        limit: parseInt(limit as string),\n        offset: (parseInt(page as string) - 1) * parseInt(limit as string),\n      };\n\n      const whispers = await storage.getWhispers(filters);\n      res.json(whispers);\n    } catch (error) {\n      console.error(\"Error fetching whispers:\", error);\n      res.status(500).json({ message: \"Failed to fetch whispers\" });\n    }\n  });\n\n  // Get single whisper with replies\n  app.get('/api/whispers/:id', async (req, res) => {\n    try {\n      const whisper = await storage.getWhisperById(req.params.id);\n      if (!whisper) {\n        return res.status(404).json({ message: \"Whisper not found\" });\n      }\n      res.json(whisper);\n    } catch (error) {\n      console.error(\"Error fetching whisper:\", error);\n      res.status(500).json({ message: \"Failed to fetch whisper\" });\n    }\n  });\n\n  // Create whisper\n  app.post('/api/whispers', whisperLimiter, async (req, res) => {\n    try {\n      const data = insertWhisperSchema.parse(req.body);\n      const whisper = await storage.createWhisper(data, getClientIP(req));\n      res.status(201).json(whisper);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Validation error\", errors: error.errors });\n      }\n      console.error(\"Error creating whisper:\", error);\n      res.status(500).json({ message: \"Failed to create whisper\" });\n    }\n  });\n\n  // Create reply\n  app.post('/api/whispers/:id/replies', replyLimiter, async (req, res) => {\n    try {\n      const data = insertReplySchema.parse({\n        ...req.body,\n        whisperId: req.params.id,\n      });\n      \n      const reply = await storage.createReply(data, getClientIP(req));\n      res.status(201).json(reply);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Validation error\", errors: error.errors });\n      }\n      console.error(\"Error creating reply:\", error);\n      res.status(500).json({ message: \"Failed to create reply\" });\n    }\n  });\n\n  // Vote on content\n  app.post('/api/vote', voteLimiter, async (req, res) => {\n    try {\n      const { contentType, contentId, voteType } = req.body;\n      const ipAddress = getClientIP(req);\n      \n      if (!['whisper', 'reply'].includes(contentType)) {\n        return res.status(400).json({ message: \"Invalid content type\" });\n      }\n      \n      if (!['up', 'down'].includes(voteType)) {\n        return res.status(400).json({ message: \"Invalid vote type\" });\n      }\n\n      // Check if user already voted\n      const existingVote = await storage.hasVoted(contentType, contentId, ipAddress);\n      if (existingVote) {\n        if (existingVote.voteType === voteType) {\n          // Remove vote if same type\n          await storage.removeVote(contentType, contentId, ipAddress);\n        } else {\n          // Remove old vote and add new one\n          await storage.removeVote(contentType, contentId, ipAddress);\n          await storage.recordVote({ contentType, contentId, voteType }, ipAddress);\n        }\n      } else {\n        // Record new vote\n        await storage.recordVote({ contentType, contentId, voteType }, ipAddress);\n      }\n\n      // Update vote counts\n      // This is a simplified approach - in production you'd want to aggregate votes more efficiently\n      res.json({ message: \"Vote recorded\" });\n    } catch (error) {\n      console.error(\"Error recording vote:\", error);\n      res.status(500).json({ message: \"Failed to record vote\" });\n    }\n  });\n\n  // Report content\n  app.post('/api/report', async (req, res) => {\n    try {\n      const data = insertFlagSchema.parse(req.body);\n      const flag = await storage.createFlag(data, getClientIP(req));\n      \n      // Flag the content\n      if (data.contentType === 'whisper') {\n        await storage.flagWhisper(data.contentId);\n      } else {\n        await storage.flagReply(data.contentId);\n      }\n      \n      res.status(201).json({ message: \"Content reported successfully\" });\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Validation error\", errors: error.errors });\n      }\n      console.error(\"Error reporting content:\", error);\n      res.status(500).json({ message: \"Failed to report content\" });\n    }\n  });\n\n  // Get tags\n  app.get('/api/tags', async (req, res) => {\n    try {\n      const [moodTags, topicTags] = await Promise.all([\n        storage.getMoodTags(),\n        storage.getTopicTags()\n      ]);\n      \n      res.json({ moodTags, topicTags });\n    } catch (error) {\n      console.error(\"Error fetching tags:\", error);\n      res.status(500).json({ message: \"Failed to fetch tags\" });\n    }\n  });\n\n  // Get current theme\n  app.get('/api/themes/current', async (req, res) => {\n    try {\n      const theme = await storage.getCurrentTheme();\n      res.json(theme);\n    } catch (error) {\n      console.error(\"Error fetching current theme:\", error);\n      res.status(500).json({ message: \"Failed to fetch current theme\" });\n    }\n  });\n\n  // Get all themes\n  app.get('/api/themes', async (req, res) => {\n    try {\n      const themes = await storage.getThemes();\n      res.json(themes);\n    } catch (error) {\n      console.error(\"Error fetching themes:\", error);\n      res.status(500).json({ message: \"Failed to fetch themes\" });\n    }\n  });\n\n  // Admin routes\n  app.get('/api/admin/stats', isAuthenticated, isAdmin, async (req: any, res) => {\n    try {\n      const stats = await storage.getStats();\n      res.json(stats);\n    } catch (error) {\n      console.error(\"Error fetching admin stats:\", error);\n      res.status(500).json({ message: \"Failed to fetch stats\" });\n    }\n  });\n\n  app.get('/api/admin/flagged', isAuthenticated, isAdmin, async (req: any, res) => {\n    try {\n      const flaggedContent = await storage.getFlaggedContent();\n      res.json(flaggedContent);\n    } catch (error) {\n      console.error(\"Error fetching flagged content:\", error);\n      res.status(500).json({ message: \"Failed to fetch flagged content\" });\n    }\n  });\n\n  app.post('/api/admin/content/:type/:id/approve', isAuthenticated, isAdmin, async (req: any, res) => {\n    try {\n      const { type, id } = req.params;\n      \n      if (type === 'whisper') {\n        // Unflag whisper (you'd implement this method in storage)\n        // await storage.unflagWhisper(id);\n      } else if (type === 'reply') {\n        // await storage.unflagReply(id);\n      }\n      \n      await storage.logAdminAction({\n        adminUserId: req.user.claims.sub,\n        actionType: 'approve_content',\n        targetType: type,\n        targetId: id,\n      });\n      \n      res.json({ message: \"Content approved\" });\n    } catch (error) {\n      console.error(\"Error approving content:\", error);\n      res.status(500).json({ message: \"Failed to approve content\" });\n    }\n  });\n\n  app.delete('/api/admin/content/:type/:id', isAuthenticated, isAdmin, async (req: any, res) => {\n    try {\n      const { type, id } = req.params;\n      \n      if (type === 'whisper') {\n        await storage.deleteWhisper(id);\n      } else if (type === 'reply') {\n        await storage.deleteReply(id);\n      }\n      \n      await storage.logAdminAction({\n        adminUserId: req.user.claims.sub,\n        actionType: 'delete_content',\n        targetType: type,\n        targetId: id,\n      });\n      \n      res.json({ message: \"Content deleted\" });\n    } catch (error) {\n      console.error(\"Error deleting content:\", error);\n      res.status(500).json({ message: \"Failed to delete content\" });\n    }\n  });\n\n  app.post('/api/admin/tags/mood', isAuthenticated, isAdmin, async (req: any, res) => {\n    try {\n      const data = insertMoodTagSchema.parse(req.body);\n      const tag = await storage.createMoodTag(data);\n      \n      await storage.logAdminAction({\n        adminUserId: req.user.claims.sub,\n        actionType: 'create_mood_tag',\n        details: JSON.stringify(data),\n      });\n      \n      res.status(201).json(tag);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Validation error\", errors: error.errors });\n      }\n      console.error(\"Error creating mood tag:\", error);\n      res.status(500).json({ message: \"Failed to create mood tag\" });\n    }\n  });\n\n  app.post('/api/admin/tags/topic', isAuthenticated, isAdmin, async (req: any, res) => {\n    try {\n      const data = insertTopicTagSchema.parse(req.body);\n      const tag = await storage.createTopicTag(data);\n      \n      await storage.logAdminAction({\n        adminUserId: req.user.claims.sub,\n        actionType: 'create_topic_tag',\n        details: JSON.stringify(data),\n      });\n      \n      res.status(201).json(tag);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Validation error\", errors: error.errors });\n      }\n      console.error(\"Error creating topic tag:\", error);\n      res.status(500).json({ message: \"Failed to create topic tag\" });\n    }\n  });\n\n  app.post('/api/admin/themes', isAuthenticated, isAdmin, async (req: any, res) => {\n    try {\n      const data = insertThemeSchema.parse(req.body);\n      const theme = await storage.createTheme(data);\n      \n      await storage.logAdminAction({\n        adminUserId: req.user.claims.sub,\n        actionType: 'create_theme',\n        details: JSON.stringify(data),\n      });\n      \n      res.status(201).json(theme);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Validation error\", errors: error.errors });\n      }\n      console.error(\"Error creating theme:\", error);\n      res.status(500).json({ message: \"Failed to create theme\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":14069},"server/storage.ts":{"content":"import {\n  users,\n  whispers,\n  replies,\n  moodTags,\n  topicTags,\n  themes,\n  flags,\n  votes,\n  adminActions,\n  type User,\n  type UpsertUser,\n  type Whisper,\n  type WhisperWithRelations,\n  type InsertWhisper,\n  type Reply,\n  type InsertReply,\n  type MoodTag,\n  type TopicTag,\n  type Theme,\n  type Flag,\n  type Vote,\n  type AdminAction,\n  type InsertMoodTag,\n  type InsertTopicTag,\n  type InsertTheme,\n  type InsertFlag,\n  type InsertVote,\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, desc, and, or, sql, count, asc } from \"drizzle-orm\";\nimport { createHash } from \"crypto\";\n\nexport interface IStorage {\n  // User operations (required for Replit Auth)\n  getUser(id: string): Promise<User | undefined>;\n  upsertUser(user: UpsertUser): Promise<User>;\n  \n  // Whisper operations\n  getWhispers(filters?: {\n    moodTagId?: string;\n    topicTagId?: string;\n    themeId?: string;\n    sort?: 'recent' | 'popular' | 'discussed';\n    search?: string;\n    limit?: number;\n    offset?: number;\n  }): Promise<WhisperWithRelations[]>;\n  getWhisperById(id: string): Promise<WhisperWithRelations | undefined>;\n  createWhisper(whisper: InsertWhisper, ipAddress: string): Promise<Whisper>;\n  updateWhisperVotes(id: string, upvotes: number, downvotes: number): Promise<void>;\n  flagWhisper(id: string): Promise<void>;\n  deleteWhisper(id: string): Promise<void>;\n  \n  // Reply operations\n  getRepliesByWhisperId(whisperId: string): Promise<Reply[]>;\n  createReply(reply: InsertReply, ipAddress: string): Promise<Reply>;\n  updateReplyVotes(id: string, upvotes: number, downvotes: number): Promise<void>;\n  flagReply(id: string): Promise<void>;\n  deleteReply(id: string): Promise<void>;\n  \n  // Tag operations\n  getMoodTags(): Promise<MoodTag[]>;\n  getTopicTags(): Promise<TopicTag[]>;\n  createMoodTag(tag: InsertMoodTag): Promise<MoodTag>;\n  createTopicTag(tag: InsertTopicTag): Promise<MoodTag>;\n  deleteMoodTag(id: string): Promise<void>;\n  deleteTopicTag(id: string): Promise<void>;\n  \n  // Theme operations\n  getThemes(): Promise<Theme[]>;\n  getCurrentTheme(): Promise<Theme | undefined>;\n  createTheme(theme: InsertTheme): Promise<Theme>;\n  updateTheme(id: string, theme: Partial<InsertTheme>): Promise<void>;\n  deleteTheme(id: string): Promise<void>;\n  \n  // Voting operations\n  hasVoted(contentType: string, contentId: string, ipAddress: string): Promise<Vote | undefined>;\n  recordVote(vote: InsertVote, ipAddress: string): Promise<Vote>;\n  removeVote(contentType: string, contentId: string, ipAddress: string): Promise<void>;\n  \n  // Flag operations\n  createFlag(flag: InsertFlag, ipAddress: string): Promise<Flag>;\n  getFlaggedContent(): Promise<(Flag & { whisper?: Whisper; reply?: Reply })[]>;\n  \n  // Admin operations\n  getStats(): Promise<{\n    totalWhispers: number;\n    totalReplies: number;\n    flaggedContent: number;\n    activeThemes: number;\n    todayWhispers: number;\n  }>;\n  logAdminAction(action: Omit<AdminAction, 'id' | 'createdAt'>): Promise<AdminAction>;\n}\n\nfunction hashIP(ip: string): string {\n  return createHash('sha256').update(ip + (process.env.IP_SALT || 'default-salt')).digest('hex');\n}\n\nexport class DatabaseStorage implements IStorage {\n  // User operations (required for Replit Auth)\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user;\n  }\n\n  async upsertUser(userData: UpsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(userData)\n      .onConflictDoUpdate({\n        target: users.id,\n        set: {\n          ...userData,\n          updatedAt: new Date(),\n        },\n      })\n      .returning();\n    return user;\n  }\n\n  // Whisper operations\n  async getWhispers(filters?: {\n    moodTagId?: string;\n    topicTagId?: string;\n    themeId?: string;\n    sort?: 'recent' | 'popular' | 'discussed';\n    search?: string;\n    limit?: number;\n    offset?: number;\n  }): Promise<WhisperWithRelations[]> {\n    let query = db\n      .select({\n        whisper: whispers,\n        moodTag: moodTags,\n        topicTag: topicTags,\n        theme: themes,\n        replyCount: sql<number>`cast(count(${replies.id}) as int)`.as('reply_count'),\n      })\n      .from(whispers)\n      .leftJoin(moodTags, eq(whispers.moodTagId, moodTags.id))\n      .leftJoin(topicTags, eq(whispers.topicTagId, topicTags.id))\n      .leftJoin(themes, eq(whispers.themeId, themes.id))\n      .leftJoin(replies, eq(whispers.id, replies.whisperId))\n      .where(and(\n        eq(whispers.buried, false),\n        eq(whispers.flagged, false)\n      ))\n      .groupBy(whispers.id, moodTags.id, topicTags.id, themes.id);\n\n    // Apply filters\n    const conditions = [eq(whispers.buried, false), eq(whispers.flagged, false)];\n    \n    if (filters?.moodTagId) {\n      conditions.push(eq(whispers.moodTagId, filters.moodTagId));\n    }\n    \n    if (filters?.topicTagId) {\n      conditions.push(eq(whispers.topicTagId, filters.topicTagId));\n    }\n    \n    if (filters?.themeId) {\n      conditions.push(eq(whispers.themeId, filters.themeId));\n    }\n    \n    if (filters?.search) {\n      conditions.push(sql`${whispers.text} ILIKE ${'%' + filters.search + '%'}`);\n    }\n\n    query = query.where(and(...conditions));\n\n    // Apply sorting\n    if (filters?.sort === 'popular') {\n      query = query.orderBy(desc(sql`${whispers.upvotes} - ${whispers.downvotes}`));\n    } else if (filters?.sort === 'discussed') {\n      query = query.orderBy(desc(sql`count(${replies.id})`));\n    } else {\n      query = query.orderBy(desc(whispers.createdAt));\n    }\n\n    // Apply pagination\n    if (filters?.limit) {\n      query = query.limit(filters.limit);\n    }\n    if (filters?.offset) {\n      query = query.offset(filters.offset);\n    }\n\n    const results = await query;\n    \n    return results.map(result => ({\n      ...result.whisper,\n      moodTag: result.moodTag || undefined,\n      topicTag: result.topicTag || undefined,\n      theme: result.theme || undefined,\n      replies: [], // Will be populated separately if needed\n    }));\n  }\n\n  async getWhisperById(id: string): Promise<WhisperWithRelations | undefined> {\n    const [result] = await db\n      .select({\n        whisper: whispers,\n        moodTag: moodTags,\n        topicTag: topicTags,\n        theme: themes,\n      })\n      .from(whispers)\n      .leftJoin(moodTags, eq(whispers.moodTagId, moodTags.id))\n      .leftJoin(topicTags, eq(whispers.topicTagId, topicTags.id))\n      .leftJoin(themes, eq(whispers.themeId, themes.id))\n      .where(eq(whispers.id, id));\n\n    if (!result) return undefined;\n\n    const whisperReplies = await this.getRepliesByWhisperId(id);\n\n    return {\n      ...result.whisper,\n      moodTag: result.moodTag || undefined,\n      topicTag: result.topicTag || undefined,\n      theme: result.theme || undefined,\n      replies: whisperReplies,\n    };\n  }\n\n  async createWhisper(whisper: InsertWhisper, ipAddress: string): Promise<Whisper> {\n    const [newWhisper] = await db\n      .insert(whispers)\n      .values({\n        ...whisper,\n        ipHash: hashIP(ipAddress),\n      })\n      .returning();\n    return newWhisper;\n  }\n\n  async updateWhisperVotes(id: string, upvotes: number, downvotes: number): Promise<void> {\n    await db\n      .update(whispers)\n      .set({ \n        upvotes, \n        downvotes,\n        buried: downvotes >= 10 // Bury if too many downvotes\n      })\n      .where(eq(whispers.id, id));\n  }\n\n  async flagWhisper(id: string): Promise<void> {\n    await db\n      .update(whispers)\n      .set({ flagged: true })\n      .where(eq(whispers.id, id));\n  }\n\n  async deleteWhisper(id: string): Promise<void> {\n    await db.delete(whispers).where(eq(whispers.id, id));\n  }\n\n  // Reply operations\n  async getRepliesByWhisperId(whisperId: string): Promise<Reply[]> {\n    return await db\n      .select()\n      .from(replies)\n      .where(and(\n        eq(replies.whisperId, whisperId),\n        eq(replies.buried, false),\n        eq(replies.flagged, false)\n      ))\n      .orderBy(asc(replies.createdAt));\n  }\n\n  async createReply(reply: InsertReply, ipAddress: string): Promise<Reply> {\n    const [newReply] = await db\n      .insert(replies)\n      .values({\n        ...reply,\n        ipHash: hashIP(ipAddress),\n      })\n      .returning();\n    return newReply;\n  }\n\n  async updateReplyVotes(id: string, upvotes: number, downvotes: number): Promise<void> {\n    await db\n      .update(replies)\n      .set({ \n        upvotes, \n        downvotes,\n        buried: downvotes >= 10 // Bury if too many downvotes\n      })\n      .where(eq(replies.id, id));\n  }\n\n  async flagReply(id: string): Promise<void> {\n    await db\n      .update(replies)\n      .set({ flagged: true })\n      .where(eq(replies.id, id));\n  }\n\n  async deleteReply(id: string): Promise<void> {\n    await db.delete(replies).where(eq(replies.id, id));\n  }\n\n  // Tag operations\n  async getMoodTags(): Promise<MoodTag[]> {\n    return await db.select().from(moodTags).orderBy(asc(moodTags.name));\n  }\n\n  async getTopicTags(): Promise<TopicTag[]> {\n    return await db.select().from(topicTags).orderBy(asc(topicTags.name));\n  }\n\n  async createMoodTag(tag: InsertMoodTag): Promise<MoodTag> {\n    const [newTag] = await db.insert(moodTags).values(tag).returning();\n    return newTag;\n  }\n\n  async createTopicTag(tag: InsertTopicTag): Promise<MoodTag> {\n    const [newTag] = await db.insert(topicTags).values(tag).returning();\n    return newTag;\n  }\n\n  async deleteMoodTag(id: string): Promise<void> {\n    await db.delete(moodTags).where(eq(moodTags.id, id));\n  }\n\n  async deleteTopicTag(id: string): Promise<void> {\n    await db.delete(topicTags).where(eq(topicTags.id, id));\n  }\n\n  // Theme operations\n  async getThemes(): Promise<Theme[]> {\n    return await db.select().from(themes).orderBy(desc(themes.startDate));\n  }\n\n  async getCurrentTheme(): Promise<Theme | undefined> {\n    const now = new Date();\n    const [theme] = await db\n      .select()\n      .from(themes)\n      .where(and(\n        eq(themes.isActive, true),\n        sql`${themes.startDate} <= ${now}`,\n        sql`${themes.endDate} >= ${now}`\n      ))\n      .orderBy(desc(themes.startDate))\n      .limit(1);\n    return theme;\n  }\n\n  async createTheme(theme: InsertTheme): Promise<Theme> {\n    const [newTheme] = await db.insert(themes).values(theme).returning();\n    return newTheme;\n  }\n\n  async updateTheme(id: string, theme: Partial<InsertTheme>): Promise<void> {\n    await db.update(themes).set(theme).where(eq(themes.id, id));\n  }\n\n  async deleteTheme(id: string): Promise<void> {\n    await db.delete(themes).where(eq(themes.id, id));\n  }\n\n  // Voting operations\n  async hasVoted(contentType: string, contentId: string, ipAddress: string): Promise<Vote | undefined> {\n    const [vote] = await db\n      .select()\n      .from(votes)\n      .where(and(\n        eq(votes.contentType, contentType),\n        eq(votes.contentId, contentId),\n        eq(votes.ipHash, hashIP(ipAddress))\n      ));\n    return vote;\n  }\n\n  async recordVote(vote: InsertVote, ipAddress: string): Promise<Vote> {\n    const [newVote] = await db\n      .insert(votes)\n      .values({\n        ...vote,\n        ipHash: hashIP(ipAddress),\n      })\n      .returning();\n    return newVote;\n  }\n\n  async removeVote(contentType: string, contentId: string, ipAddress: string): Promise<void> {\n    await db\n      .delete(votes)\n      .where(and(\n        eq(votes.contentType, contentType),\n        eq(votes.contentId, contentId),\n        eq(votes.ipHash, hashIP(ipAddress))\n      ));\n  }\n\n  // Flag operations\n  async createFlag(flag: InsertFlag, ipAddress: string): Promise<Flag> {\n    const [newFlag] = await db\n      .insert(flags)\n      .values({\n        ...flag,\n        ipHash: hashIP(ipAddress),\n      })\n      .returning();\n    return newFlag;\n  }\n\n  async getFlaggedContent(): Promise<(Flag & { whisper?: Whisper; reply?: Reply })[]> {\n    const flaggedWhispers = await db\n      .select({\n        flag: flags,\n        whisper: whispers,\n      })\n      .from(flags)\n      .leftJoin(whispers, and(\n        eq(flags.contentType, 'whisper'),\n        eq(flags.contentId, whispers.id)\n      ))\n      .where(eq(flags.contentType, 'whisper'));\n\n    const flaggedReplies = await db\n      .select({\n        flag: flags,\n        reply: replies,\n      })\n      .from(flags)\n      .leftJoin(replies, and(\n        eq(flags.contentType, 'reply'),\n        eq(flags.contentId, replies.id)\n      ))\n      .where(eq(flags.contentType, 'reply'));\n\n    return [\n      ...flaggedWhispers.map(f => ({ ...f.flag, whisper: f.whisper || undefined })),\n      ...flaggedReplies.map(f => ({ ...f.flag, reply: f.reply || undefined })),\n    ];\n  }\n\n  // Admin operations\n  async getStats(): Promise<{\n    totalWhispers: number;\n    totalReplies: number;\n    flaggedContent: number;\n    activeThemes: number;\n    todayWhispers: number;\n  }> {\n    const [whisperCount] = await db.select({ count: count() }).from(whispers);\n    const [replyCount] = await db.select({ count: count() }).from(replies);\n    const [flagCount] = await db.select({ count: count() }).from(flags);\n    const [themeCount] = await db.select({ count: count() }).from(themes).where(eq(themes.isActive, true));\n    \n    const today = new Date();\n    today.setHours(0, 0, 0, 0);\n    const [todayCount] = await db\n      .select({ count: count() })\n      .from(whispers)\n      .where(sql`${whispers.createdAt} >= ${today}`);\n\n    return {\n      totalWhispers: whisperCount.count,\n      totalReplies: replyCount.count,\n      flaggedContent: flagCount.count,\n      activeThemes: themeCount.count,\n      todayWhispers: todayCount.count,\n    };\n  }\n\n  async logAdminAction(action: Omit<AdminAction, 'id' | 'createdAt'>): Promise<AdminAction> {\n    const [newAction] = await db\n      .insert(adminActions)\n      .values(action)\n      .returning();\n    return newAction;\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":13831},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from 'drizzle-orm';\nimport {\n  index,\n  jsonb,\n  pgTable,\n  timestamp,\n  varchar,\n  text,\n  integer,\n  boolean,\n  uuid,\n} from \"drizzle-orm/pg-core\";\nimport { relations } from \"drizzle-orm\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Session storage table (required for Replit Auth)\nexport const sessions = pgTable(\n  \"sessions\",\n  {\n    sid: varchar(\"sid\").primaryKey(),\n    sess: jsonb(\"sess\").notNull(),\n    expire: timestamp(\"expire\").notNull(),\n  },\n  (table) => [index(\"IDX_session_expire\").on(table.expire)],\n);\n\n// User storage table (required for Replit Auth)\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: varchar(\"email\").unique(),\n  firstName: varchar(\"first_name\"),\n  lastName: varchar(\"last_name\"),\n  profileImageUrl: varchar(\"profile_image_url\"),\n  isAdmin: boolean(\"is_admin\").default(false),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Mood tags\nexport const moodTags = pgTable(\"mood_tags\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: varchar(\"name\", { length: 50 }).notNull().unique(),\n  description: text(\"description\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Topic tags\nexport const topicTags = pgTable(\"topic_tags\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: varchar(\"name\", { length: 50 }).notNull().unique(),\n  description: text(\"description\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Themes\nexport const themes = pgTable(\"themes\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: varchar(\"title\", { length: 200 }).notNull(),\n  description: text(\"description\"),\n  startDate: timestamp(\"start_date\").notNull(),\n  endDate: timestamp(\"end_date\").notNull(),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Whispers\nexport const whispers = pgTable(\"whispers\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  text: text(\"text\").notNull(),\n  nickname: varchar(\"nickname\", { length: 50 }),\n  moodTagId: uuid(\"mood_tag_id\").references(() => moodTags.id),\n  topicTagId: uuid(\"topic_tag_id\").references(() => topicTags.id),\n  themeId: uuid(\"theme_id\").references(() => themes.id),\n  upvotes: integer(\"upvotes\").default(0),\n  downvotes: integer(\"downvotes\").default(0),\n  buried: boolean(\"buried\").default(false),\n  flagged: boolean(\"flagged\").default(false),\n  ipHash: varchar(\"ip_hash\", { length: 64 }),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Replies\nexport const replies = pgTable(\"replies\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  whisperId: uuid(\"whisper_id\").notNull().references(() => whispers.id, { onDelete: 'cascade' }),\n  text: text(\"text\").notNull(),\n  nickname: varchar(\"nickname\", { length: 50 }),\n  upvotes: integer(\"upvotes\").default(0),\n  downvotes: integer(\"downvotes\").default(0),\n  buried: boolean(\"buried\").default(false),\n  flagged: boolean(\"flagged\").default(false),\n  ipHash: varchar(\"ip_hash\", { length: 64 }),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Flags/Reports\nexport const flags = pgTable(\"flags\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  contentType: varchar(\"content_type\", { length: 20 }).notNull(), // 'whisper' or 'reply'\n  contentId: uuid(\"content_id\").notNull(),\n  reason: text(\"reason\").notNull(),\n  ipHash: varchar(\"ip_hash\", { length: 64 }).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Votes\nexport const votes = pgTable(\"votes\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  contentType: varchar(\"content_type\", { length: 20 }).notNull(), // 'whisper' or 'reply'\n  contentId: uuid(\"content_id\").notNull(),\n  voteType: varchar(\"vote_type\", { length: 10 }).notNull(), // 'up' or 'down'\n  ipHash: varchar(\"ip_hash\", { length: 64 }).notNull(),\n  sessionId: varchar(\"session_id\", { length: 128 }),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Admin actions log\nexport const adminActions = pgTable(\"admin_actions\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  adminUserId: varchar(\"admin_user_id\").notNull().references(() => users.id),\n  actionType: varchar(\"action_type\", { length: 50 }).notNull(),\n  targetType: varchar(\"target_type\", { length: 20 }),\n  targetId: uuid(\"target_id\"),\n  details: text(\"details\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Relations\nexport const whispersRelations = relations(whispers, ({ one, many }) => ({\n  moodTag: one(moodTags, {\n    fields: [whispers.moodTagId],\n    references: [moodTags.id],\n  }),\n  topicTag: one(topicTags, {\n    fields: [whispers.topicTagId],\n    references: [topicTags.id],\n  }),\n  theme: one(themes, {\n    fields: [whispers.themeId],\n    references: [themes.id],\n  }),\n  replies: many(replies),\n}));\n\nexport const repliesRelations = relations(replies, ({ one }) => ({\n  whisper: one(whispers, {\n    fields: [replies.whisperId],\n    references: [whispers.id],\n  }),\n}));\n\nexport const moodTagsRelations = relations(moodTags, ({ many }) => ({\n  whispers: many(whispers),\n}));\n\nexport const topicTagsRelations = relations(topicTags, ({ many }) => ({\n  whispers: many(whispers),\n}));\n\nexport const themesRelations = relations(themes, ({ many }) => ({\n  whispers: many(whispers),\n}));\n\n// Zod schemas\nexport const insertWhisperSchema = createInsertSchema(whispers).omit({\n  id: true,\n  upvotes: true,\n  downvotes: true,\n  buried: true,\n  flagged: true,\n  ipHash: true,\n  createdAt: true,\n}).extend({\n  text: z.string().min(1).max(200),\n  nickname: z.string().max(50).optional(),\n});\n\nexport const insertReplySchema = createInsertSchema(replies).omit({\n  id: true,\n  upvotes: true,\n  downvotes: true,\n  buried: true,\n  flagged: true,\n  ipHash: true,\n  createdAt: true,\n}).extend({\n  text: z.string().min(1).max(200),\n  nickname: z.string().max(50).optional(),\n});\n\nexport const insertMoodTagSchema = createInsertSchema(moodTags).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertTopicTagSchema = createInsertSchema(topicTags).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertThemeSchema = createInsertSchema(themes).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertFlagSchema = createInsertSchema(flags).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertVoteSchema = createInsertSchema(votes).omit({\n  id: true,\n  createdAt: true,\n});\n\n// Types\nexport type UpsertUser = typeof users.$inferInsert;\nexport type User = typeof users.$inferSelect;\nexport type InsertWhisper = z.infer<typeof insertWhisperSchema>;\nexport type Whisper = typeof whispers.$inferSelect;\nexport type WhisperWithRelations = Whisper & {\n  moodTag?: MoodTag;\n  topicTag?: TopicTag;\n  theme?: Theme;\n  replies?: Reply[];\n};\nexport type InsertReply = z.infer<typeof insertReplySchema>;\nexport type Reply = typeof replies.$inferSelect;\nexport type MoodTag = typeof moodTags.$inferSelect;\nexport type TopicTag = typeof topicTags.$inferSelect;\nexport type Theme = typeof themes.$inferSelect;\nexport type Flag = typeof flags.$inferSelect;\nexport type Vote = typeof votes.$inferSelect;\nexport type AdminAction = typeof adminActions.$inferSelect;\nexport type InsertMoodTag = z.infer<typeof insertMoodTagSchema>;\nexport type InsertTopicTag = z.infer<typeof insertTopicTagSchema>;\nexport type InsertTheme = z.infer<typeof insertThemeSchema>;\nexport type InsertFlag = z.infer<typeof insertFlagSchema>;\nexport type InsertVote = z.infer<typeof insertVoteSchema>;\n","size_bytes":7647},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport NotFound from \"@/pages/not-found\";\nimport Landing from \"@/pages/landing\";\nimport Home from \"@/pages/home\";\nimport Browse from \"@/pages/browse\";\nimport Submit from \"@/pages/submit\";\nimport WhisperThread from \"@/pages/whisper-thread\";\nimport AdminLogin from \"@/pages/admin-login\";\nimport AdminDashboard from \"@/pages/admin-dashboard\";\nimport Themes from \"@/pages/themes\";\nimport About from \"@/pages/about\";\nimport Guidelines from \"@/pages/guidelines\";\nimport Contact from \"@/pages/contact\";\n\nfunction Router() {\n  const { isAuthenticated, isLoading } = useAuth();\n\n  return (\n    <Switch>\n      {isLoading || !isAuthenticated ? (\n        <>\n          <Route path=\"/\" component={Landing} />\n          <Route path=\"/browse\" component={Browse} />\n          <Route path=\"/submit\" component={Submit} />\n          <Route path=\"/whisper/:id\" component={WhisperThread} />\n          <Route path=\"/themes\" component={Themes} />\n          <Route path=\"/about\" component={About} />\n          <Route path=\"/guidelines\" component={Guidelines} />\n          <Route path=\"/contact\" component={Contact} />\n          <Route path=\"/admin/login\" component={AdminLogin} />\n        </>\n      ) : (\n        <>\n          <Route path=\"/\" component={Home} />\n          <Route path=\"/browse\" component={Browse} />\n          <Route path=\"/submit\" component={Submit} />\n          <Route path=\"/whisper/:id\" component={WhisperThread} />\n          <Route path=\"/themes\" component={Themes} />\n          <Route path=\"/about\" component={About} />\n          <Route path=\"/guidelines\" component={Guidelines} />\n          <Route path=\"/contact\" component={Contact} />\n          <Route path=\"/admin\" component={AdminDashboard} />\n        </>\n      )}\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <div className=\"min-h-screen bg-midnight text-cool-gray\">\n          <Toaster />\n          <Router />\n        </div>\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":2382},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap');\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(220, 43%, 11%);\n  --foreground: hsl(220, 9%, 65%);\n  --card: hsl(240, 20%, 92%);\n  --card-foreground: hsl(220, 43%, 11%);\n  --popover: hsl(220, 43%, 11%);\n  --popover-foreground: hsl(220, 9%, 65%);\n  --primary: hsl(8, 87%, 68%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(257, 100%, 83%);\n  --secondary-foreground: hsl(220, 43%, 11%);\n  --muted: hsl(220, 9%, 46%);\n  --muted-foreground: hsl(220, 9%, 65%);\n  --accent: hsl(240, 20%, 92%);\n  --accent-foreground: hsl(220, 43%, 11%);\n  --destructive: hsl(356, 91%, 54%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --border: hsl(257, 52%, 85%);\n  --input: hsl(240, 20%, 92%);\n  --ring: hsl(8, 87%, 68%);\n  --chart-1: hsl(8, 87%, 68%);\n  --chart-2: hsl(257, 100%, 83%);\n  --chart-3: hsl(220, 9%, 65%);\n  --chart-4: hsl(240, 20%, 92%);\n  --chart-5: hsl(220, 43%, 11%);\n  --midnight: hsl(220, 43%, 11%);\n  --coral: hsl(8, 87%, 68%);\n  --lavender: hsl(257, 100%, 83%);\n  --cool-gray: hsl(220, 9%, 65%);\n  --moonlight: hsl(240, 20%, 92%);\n  --sidebar: hsl(240, 20%, 92%);\n  --sidebar-foreground: hsl(220, 43%, 11%);\n  --sidebar-primary: hsl(8, 87%, 68%);\n  --sidebar-primary-foreground: hsl(0, 0%, 100%);\n  --sidebar-accent: hsl(257, 52%, 85%);\n  --sidebar-accent-foreground: hsl(220, 43%, 11%);\n  --sidebar-border: hsl(257, 52%, 85%);\n  --sidebar-ring: hsl(8, 87%, 68%);\n  --font-sans: 'Poppins', sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 1.3rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(8, 87%, 68%, 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(8, 87%, 68%, 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(8, 87%, 68%, 0.00), 0px 1px 2px -1px hsl(8, 87%, 68%, 0.00);\n  --shadow: 0px 2px 0px 0px hsl(8, 87%, 68%, 0.00), 0px 1px 2px -1px hsl(8, 87%, 68%, 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(8, 87%, 68%, 0.00), 0px 2px 4px -1px hsl(8, 87%, 68%, 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(8, 87%, 68%, 0.00), 0px 4px 6px -1px hsl(8, 87%, 68%, 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(8, 87%, 68%, 0.00), 0px 8px 10px -1px hsl(8, 87%, 68%, 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(8, 87%, 68%, 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n}\n\n.dark {\n  --background: hsl(220, 43%, 11%);\n  --foreground: hsl(220, 9%, 65%);\n  --card: hsl(220, 43%, 11%);\n  --card-foreground: hsl(220, 9%, 65%);\n  --popover: hsl(220, 43%, 11%);\n  --popover-foreground: hsl(220, 9%, 65%);\n  --primary: hsl(8, 87%, 68%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(257, 100%, 83%);\n  --secondary-foreground: hsl(220, 43%, 11%);\n  --muted: hsl(220, 9%, 46%);\n  --muted-foreground: hsl(220, 9%, 65%);\n  --accent: hsl(220, 43%, 11%);\n  --accent-foreground: hsl(257, 100%, 83%);\n  --destructive: hsl(356, 91%, 54%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --border: hsl(257, 52%, 20%);\n  --input: hsl(220, 43%, 15%);\n  --ring: hsl(8, 87%, 68%);\n  --chart-1: hsl(8, 87%, 68%);\n  --chart-2: hsl(257, 100%, 83%);\n  --chart-3: hsl(220, 9%, 65%);\n  --chart-4: hsl(240, 20%, 92%);\n  --chart-5: hsl(220, 43%, 11%);\n  --midnight: hsl(220, 43%, 11%);\n  --coral: hsl(8, 87%, 68%);\n  --lavender: hsl(257, 100%, 83%);\n  --cool-gray: hsl(220, 9%, 65%);\n  --moonlight: hsl(220, 43%, 15%);\n  --sidebar: hsl(220, 43%, 11%);\n  --sidebar-foreground: hsl(220, 9%, 65%);\n  --sidebar-primary: hsl(8, 87%, 68%);\n  --sidebar-primary-foreground: hsl(0, 0%, 100%);\n  --sidebar-accent: hsl(220, 43%, 15%);\n  --sidebar-accent-foreground: hsl(257, 100%, 83%);\n  --sidebar-border: hsl(257, 52%, 20%);\n  --sidebar-ring: hsl(8, 87%, 68%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-midnight text-cool-gray;\n    font-family: 'Poppins', sans-serif;\n  }\n}\n\n.whisper-card {\n  transition: all 0.3s ease;\n}\n\n.whisper-card:hover {\n  transform: translateY(-2px);\n  box-shadow: 0 8px 25px rgba(255, 111, 97, 0.1);\n}\n\n.vote-btn {\n  transition: all 0.2s ease;\n}\n\n.vote-btn:hover {\n  transform: scale(1.1);\n}\n\n.fade-in {\n  animation: fadeIn 0.5s ease-in;\n}\n\n@keyframes fadeIn {\n  from {\n    opacity: 0;\n    transform: translateY(20px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\n\n.gradient-bg {\n  background: linear-gradient(135deg, var(--coral) 0%, var(--lavender) 100%);\n}\n\n.bg-midnight {\n  background-color: var(--midnight);\n}\n\n.bg-coral {\n  background-color: var(--coral);\n}\n\n.bg-lavender {\n  background-color: var(--lavender);\n}\n\n.bg-cool-gray {\n  background-color: var(--cool-gray);\n}\n\n.bg-moonlight {\n  background-color: var(--moonlight);\n}\n\n.text-midnight {\n  color: var(--midnight);\n}\n\n.text-coral {\n  color: var(--coral);\n}\n\n.text-lavender {\n  color: var(--lavender);\n}\n\n.text-cool-gray {\n  color: var(--cool-gray);\n}\n\n.text-moonlight {\n  color: var(--moonlight);\n}\n\n.border-coral {\n  border-color: var(--coral);\n}\n\n.border-lavender {\n  border-color: var(--lavender);\n}\n\n.hover\\:text-coral:hover {\n  color: var(--coral);\n}\n\n.hover\\:text-lavender:hover {\n  color: var(--lavender);\n}\n\n.hover\\:bg-coral:hover {\n  background-color: var(--coral);\n}\n\n.hover\\:bg-lavender:hover {\n  background-color: var(--lavender);\n}\n","size_bytes":5257},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/footer.tsx":{"content":"import { Link } from \"wouter\";\n\nexport default function Footer() {\n  return (\n    <footer className=\"bg-midnight/95 border-t border-lavender/20 py-12 px-4\">\n      <div className=\"max-w-6xl mx-auto\">\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-8\">\n          <div className=\"md:col-span-2\">\n            <div className=\"flex items-center space-x-2 mb-4\">\n              <i className=\"fas fa-feather-alt text-coral text-2xl\"></i>\n              <span className=\"text-xl font-semibold text-white\">Whispering Walls</span>\n            </div>\n            <p className=\"text-cool-gray mb-4\">\n              A safe space for anonymous stories, creating connection through shared human experiences.\n            </p>\n            <div className=\"flex space-x-4\">\n              <button className=\"text-cool-gray/60 hover:text-coral transition-colors\">\n                <i className=\"fab fa-twitter text-xl\"></i>\n              </button>\n              <button className=\"text-cool-gray/60 hover:text-coral transition-colors\">\n                <i className=\"fab fa-instagram text-xl\"></i>\n              </button>\n              <button className=\"text-cool-gray/60 hover:text-coral transition-colors\">\n                <i className=\"fab fa-facebook text-xl\"></i>\n              </button>\n            </div>\n          </div>\n          \n          <div>\n            <h4 className=\"font-semibold text-white mb-4\">Explore</h4>\n            <ul className=\"space-y-2\">\n              <li>\n                <Link href=\"/browse\">\n                  <a className=\"text-cool-gray hover:text-coral transition-colors\">Browse Whispers</a>\n                </Link>\n              </li>\n              <li>\n                <Link href=\"/themes\">\n                  <a className=\"text-cool-gray hover:text-coral transition-colors\">Daily Themes</a>\n                </Link>\n              </li>\n              <li>\n                <Link href=\"/about\">\n                  <a className=\"text-cool-gray hover:text-coral transition-colors\">About Us</a>\n                </Link>\n              </li>\n              <li>\n                <Link href=\"/submit\">\n                  <a className=\"text-cool-gray hover:text-coral transition-colors\">Share a Whisper</a>\n                </Link>\n              </li>\n            </ul>\n          </div>\n          \n          <div>\n            <h4 className=\"font-semibold text-white mb-4\">Support</h4>\n            <ul className=\"space-y-2\">\n              <li>\n                <Link href=\"/guidelines\">\n                  <a className=\"text-cool-gray hover:text-coral transition-colors\">Guidelines</a>\n                </Link>\n              </li>\n              <li>\n                <Link href=\"/contact\">\n                  <a className=\"text-cool-gray hover:text-coral transition-colors\">Contact</a>\n                </Link>\n              </li>\n              <li>\n                <a href=\"#\" className=\"text-cool-gray hover:text-coral transition-colors\">Privacy Policy</a>\n              </li>\n              <li>\n                <a href=\"#\" className=\"text-cool-gray hover:text-coral transition-colors\">Help Center</a>\n              </li>\n            </ul>\n          </div>\n        </div>\n        \n        <div className=\"border-t border-lavender/20 mt-8 pt-8 text-center\">\n          <p className=\"text-cool-gray/60\">\n            © 2024 Whispering Walls. Made with ❤️ for safe storytelling.\n          </p>\n        </div>\n      </div>\n    </footer>\n  );\n}\n","size_bytes":3443},"client/src/components/navigation.tsx":{"content":"import { useState } from \"react\";\nimport { Link, useLocation } from \"wouter\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { Button } from \"@/components/ui/button\";\nimport { Sheet, SheetContent, SheetTrigger } from \"@/components/ui/sheet\";\nimport { Menu } from \"lucide-react\";\n\nexport default function Navigation() {\n  const [location] = useLocation();\n  const { isAuthenticated, user } = useAuth();\n  const [mobileMenuOpen, setMobileMenuOpen] = useState(false);\n\n  const navItems = [\n    { href: \"/browse\", label: \"Browse\", icon: \"fas fa-eye\" },\n    { href: \"/themes\", label: \"Themes\", icon: \"fas fa-calendar-day\" },\n    { href: \"/about\", label: \"About\", icon: \"fas fa-info-circle\" },\n    { href: \"/guidelines\", label: \"Guidelines\", icon: \"fas fa-book\" },\n    { href: \"/contact\", label: \"Contact\", icon: \"fas fa-envelope\" },\n  ];\n\n  const isActivePath = (path: string) => location === path;\n\n  const NavLink = ({ href, children, className = \"\", onClick }: any) => (\n    <Link href={href}>\n      <a \n        className={`hover:text-coral transition-colors duration-200 ${className} ${\n          isActivePath(href) ? 'text-coral' : 'text-cool-gray'\n        }`}\n        onClick={onClick}\n      >\n        {children}\n      </a>\n    </Link>\n  );\n\n  return (\n    <nav className=\"bg-midnight/95 backdrop-blur-sm border-b border-lavender/20 sticky top-0 z-50\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex justify-between items-center h-16\">\n          {/* Logo */}\n          <Link href={isAuthenticated ? \"/\" : \"/\"}>\n            <a className=\"flex items-center space-x-2\">\n              <i className=\"fas fa-feather-alt text-coral text-2xl\"></i>\n              <span className=\"text-xl font-semibold text-white\">Whispering Walls</span>\n            </a>\n          </Link>\n          \n          {/* Desktop Navigation */}\n          <div className=\"hidden md:flex items-center space-x-6\">\n            {navItems.map((item) => (\n              <NavLink key={item.href} href={item.href}>\n                {item.label}\n              </NavLink>\n            ))}\n            \n            {/* Admin Link for authenticated admin users */}\n            {isAuthenticated && user?.isAdmin && (\n              <NavLink href=\"/admin\" className=\"text-lavender\">\n                <i className=\"fas fa-shield-alt mr-1\"></i>\n                Admin\n              </NavLink>\n            )}\n\n            {/* Auth Actions */}\n            {isAuthenticated ? (\n              <div className=\"flex items-center space-x-4\">\n                <Link href=\"/submit\">\n                  <Button className=\"bg-gradient-to-r from-coral to-lavender text-white px-4 py-2 rounded-full hover:from-coral/80 hover:to-lavender/80 transition-all duration-200\">\n                    Leave a Whisper\n                  </Button>\n                </Link>\n                <a \n                  href=\"/api/logout\"\n                  className=\"text-cool-gray hover:text-coral transition-colors duration-200\"\n                >\n                  Logout\n                </a>\n              </div>\n            ) : (\n              <div className=\"flex items-center space-x-4\">\n                <Link href=\"/submit\">\n                  <Button className=\"bg-gradient-to-r from-coral to-lavender text-white px-4 py-2 rounded-full hover:from-coral/80 hover:to-lavender/80 transition-all duration-200\">\n                    Leave a Whisper\n                  </Button>\n                </Link>\n                <a \n                  href=\"/api/login\"\n                  className=\"text-cool-gray hover:text-coral transition-colors duration-200\"\n                >\n                  Login\n                </a>\n              </div>\n            )}\n          </div>\n\n          {/* Mobile menu button */}\n          <Sheet open={mobileMenuOpen} onOpenChange={setMobileMenuOpen}>\n            <SheetTrigger asChild>\n              <Button variant=\"ghost\" size=\"icon\" className=\"md:hidden text-cool-gray hover:text-coral\">\n                <Menu className=\"h-5 w-5\" />\n              </Button>\n            </SheetTrigger>\n            <SheetContent side=\"right\" className=\"bg-midnight border-lavender/20\">\n              <div className=\"flex flex-col space-y-4 mt-8\">\n                {navItems.map((item) => (\n                  <NavLink \n                    key={item.href} \n                    href={item.href}\n                    className=\"flex items-center space-x-2 text-lg\"\n                    onClick={() => setMobileMenuOpen(false)}\n                  >\n                    <i className={`${item.icon} w-5`}></i>\n                    <span>{item.label}</span>\n                  </NavLink>\n                ))}\n                \n                {isAuthenticated && user?.isAdmin && (\n                  <NavLink \n                    href=\"/admin\" \n                    className=\"flex items-center space-x-2 text-lg text-lavender\"\n                    onClick={() => setMobileMenuOpen(false)}\n                  >\n                    <i className=\"fas fa-shield-alt w-5\"></i>\n                    <span>Admin</span>\n                  </NavLink>\n                )}\n\n                <div className=\"pt-4 border-t border-lavender/20\">\n                  <Link href=\"/submit\">\n                    <Button \n                      className=\"w-full bg-gradient-to-r from-coral to-lavender text-white mb-4\"\n                      onClick={() => setMobileMenuOpen(false)}\n                    >\n                      Leave a Whisper\n                    </Button>\n                  </Link>\n                  \n                  {isAuthenticated ? (\n                    <a \n                      href=\"/api/logout\"\n                      className=\"block text-center text-cool-gray hover:text-coral transition-colors duration-200\"\n                    >\n                      Logout\n                    </a>\n                  ) : (\n                    <a \n                      href=\"/api/login\"\n                      className=\"block text-center text-cool-gray hover:text-coral transition-colors duration-200\"\n                    >\n                      Login\n                    </a>\n                  )}\n                </div>\n              </div>\n            </SheetContent>\n          </Sheet>\n        </div>\n      </div>\n    </nav>\n  );\n}\n","size_bytes":6272},"client/src/components/whisper-card.tsx":{"content":"import { Link } from \"wouter\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Button } from \"@/components/ui/button\";\n\ninterface WhisperCardProps {\n  whisper: {\n    id: string;\n    text: string;\n    nickname?: string;\n    moodTag?: { name: string };\n    topicTag?: { name: string };\n    upvotes: number;\n    downvotes: number;\n    createdAt: string;\n    replies?: any[];\n  };\n}\n\nexport default function WhisperCard({ whisper }: WhisperCardProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const voteMutation = useMutation({\n    mutationFn: async ({ voteType }: { voteType: string }) => {\n      await apiRequest(\"POST\", \"/api/vote\", {\n        contentType: \"whisper\",\n        contentId: whisper.id,\n        voteType,\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/whispers\"] });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error recording vote\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const reportMutation = useMutation({\n    mutationFn: async ({ reason }: { reason: string }) => {\n      await apiRequest(\"POST\", \"/api/report\", {\n        contentType: \"whisper\",\n        contentId: whisper.id,\n        reason,\n      });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Content reported\",\n        description: \"Thank you for helping keep our community safe.\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error reporting content\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleVote = (e: React.MouseEvent, voteType: string) => {\n    e.preventDefault();\n    e.stopPropagation();\n    voteMutation.mutate({ voteType });\n  };\n\n  const handleReport = (e: React.MouseEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    const reason = prompt(\"Please provide a reason for reporting this content:\");\n    if (reason) {\n      reportMutation.mutate({ reason });\n    }\n  };\n\n  const formatTimeAgo = (dateString: string) => {\n    const date = new Date(dateString);\n    const now = new Date();\n    const diffInMinutes = Math.floor((now.getTime() - date.getTime()) / (1000 * 60));\n    \n    if (diffInMinutes < 1) return \"Just now\";\n    if (diffInMinutes < 60) return `${diffInMinutes}m`;\n    if (diffInMinutes < 1440) return `${Math.floor(diffInMinutes / 60)}h`;\n    return `${Math.floor(diffInMinutes / 1440)}d`;\n  };\n\n  const truncateText = (text: string, maxLength: number = 150) => {\n    if (text.length <= maxLength) return text;\n    return text.substring(0, maxLength) + \"...\";\n  };\n\n  const replyCount = whisper.replies?.length || 0;\n\n  return (\n    <Link href={`/whisper/${whisper.id}`}>\n      <div className=\"whisper-card bg-moonlight rounded-2xl p-6 border border-lavender/20 hover:border-coral/30 cursor-pointer transition-all duration-300 hover:transform hover:-translate-y-1 hover:shadow-lg hover:shadow-coral/10\">\n        <div className=\"flex items-start justify-between mb-4\">\n          <div className=\"flex gap-2 flex-wrap\">\n            {whisper.moodTag && (\n              <span className=\"bg-gradient-to-r from-coral/20 to-coral/10 text-coral px-3 py-1 rounded-full text-sm font-medium\">\n                {whisper.moodTag.name}\n              </span>\n            )}\n            {whisper.topicTag && (\n              <span className=\"bg-gradient-to-r from-lavender/20 to-lavender/10 text-lavender px-3 py-1 rounded-full text-sm font-medium\">\n                {whisper.topicTag.name}\n              </span>\n            )}\n          </div>\n          <span className=\"text-cool-gray/60 text-sm whitespace-nowrap ml-2\">\n            {formatTimeAgo(whisper.createdAt)}\n          </span>\n        </div>\n        \n        <p className=\"text-midnight mb-4 leading-relaxed\">\n          {truncateText(whisper.text)}\n        </p>\n\n        {whisper.nickname && (\n          <p className=\"text-coral font-medium text-sm mb-4\">— {whisper.nickname}</p>\n        )}\n        \n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center gap-4\">\n            <button\n              onClick={(e) => handleVote(e, \"up\")}\n              className=\"vote-btn flex items-center gap-1 text-cool-gray/60 hover:text-coral transition-all duration-200 transform hover:scale-110\"\n              disabled={voteMutation.isPending}\n            >\n              <i className=\"fas fa-arrow-up\"></i>\n              <span>{whisper.upvotes}</span>\n            </button>\n            <button\n              onClick={(e) => handleVote(e, \"down\")}\n              className=\"vote-btn flex items-center gap-1 text-cool-gray/60 hover:text-lavender transition-all duration-200 transform hover:scale-110\"\n              disabled={voteMutation.isPending}\n            >\n              <i className=\"fas fa-arrow-down\"></i>\n              <span>{whisper.downvotes}</span>\n            </button>\n            <div className=\"flex items-center gap-1 text-cool-gray/60\">\n              <i className=\"fas fa-comment\"></i>\n              <span>{replyCount}</span>\n            </div>\n          </div>\n          <button\n            onClick={handleReport}\n            className=\"text-cool-gray/40 hover:text-coral/60 transition-colors duration-200 p-1\"\n            disabled={reportMutation.isPending}\n          >\n            <i className=\"fas fa-flag text-sm\"></i>\n          </button>\n        </div>\n      </div>\n    </Link>\n  );\n}\n","size_bytes":5583},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useAuth.ts":{"content":"import { useQuery } from \"@tanstack/react-query\";\n\nexport function useAuth() {\n  const { data: user, isLoading } = useQuery({\n    queryKey: [\"/api/auth/user\"],\n    retry: false,\n  });\n\n  return {\n    user,\n    isLoading,\n    isAuthenticated: !!user,\n  };\n}\n","size_bytes":257},"client/src/lib/authUtils.ts":{"content":"export function isUnauthorizedError(error: Error): boolean {\n  return /^401: .*Unauthorized/.test(error.message);\n}","size_bytes":115},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/about.tsx":{"content":"import Navigation from \"@/components/navigation\";\nimport Footer from \"@/components/footer\";\nimport { Card, CardContent } from \"@/components/ui/card\";\n\nexport default function About() {\n  return (\n    <div className=\"min-h-screen bg-midnight\">\n      <Navigation />\n      \n      <section className=\"py-16 px-4\">\n        <div className=\"max-w-4xl mx-auto\">\n          {/* Hero Section */}\n          <div className=\"text-center mb-16\">\n            <h1 className=\"text-4xl md:text-5xl font-bold text-white mb-6\">\n              About \n              <span className=\"text-transparent bg-clip-text bg-gradient-to-r from-coral to-lavender ml-2\">\n                Whispering Walls\n              </span>\n            </h1>\n            <p className=\"text-xl text-cool-gray max-w-2xl mx-auto leading-relaxed\">\n              A sanctuary for anonymous storytelling, where hearts connect through shared experiences and whispered truths.\n            </p>\n          </div>\n\n          {/* Mission Section */}\n          <Card className=\"bg-moonlight/10 backdrop-blur-sm border-lavender/20 mb-12\">\n            <CardContent className=\"p-8\">\n              <div className=\"text-center mb-8\">\n                <i className=\"fas fa-heart text-coral text-4xl mb-4\"></i>\n                <h2 className=\"text-2xl font-bold text-white mb-4\">Our Mission</h2>\n              </div>\n              <p className=\"text-cool-gray text-lg leading-relaxed text-center\">\n                Whispering Walls exists to create a safe, anonymous space where people can share their deepest thoughts, \n                emotions, and experiences without fear of judgment. We believe that every story matters, every feeling \n                is valid, and that connection through shared humanity can heal and inspire.\n              </p>\n            </CardContent>\n          </Card>\n\n          {/* Values Grid */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-8 mb-12\">\n            <Card className=\"bg-moonlight border-lavender/20\">\n              <CardContent className=\"p-6\">\n                <div className=\"text-center mb-4\">\n                  <i className=\"fas fa-shield-alt text-coral text-3xl mb-3\"></i>\n                  <h3 className=\"text-xl font-semibold text-midnight\">Anonymity First</h3>\n                </div>\n                <p className=\"text-cool-gray text-center\">\n                  Your privacy is sacred. No registration required, no personal data stored, \n                  no way to trace whispers back to you. Share freely, share safely.\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card className=\"bg-moonlight border-lavender/20\">\n              <CardContent className=\"p-6\">\n                <div className=\"text-center mb-4\">\n                  <i className=\"fas fa-hands-helping text-lavender text-3xl mb-3\"></i>\n                  <h3 className=\"text-xl font-semibold text-midnight\">Community Support</h3>\n                </div>\n                <p className=\"text-cool-gray text-center\">\n                  We foster a community of empathy and understanding. Every whisper is met with \n                  compassion, every story acknowledged with respect.\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card className=\"bg-moonlight border-lavender/20\">\n              <CardContent className=\"p-6\">\n                <div className=\"text-center mb-4\">\n                  <i className=\"fas fa-feather-alt text-coral text-3xl mb-3\"></i>\n                  <h3 className=\"text-xl font-semibold text-midnight\">Gentle Expression</h3>\n                </div>\n                <p className=\"text-cool-gray text-center\">\n                  We encourage thoughtful, gentle communication. Share your truth with kindness, \n                  respond with empathy, and create a space of healing.\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card className=\"bg-moonlight border-lavender/20\">\n              <CardContent className=\"p-6\">\n                <div className=\"text-center mb-4\">\n                  <i className=\"fas fa-globe text-lavender text-3xl mb-3\"></i>\n                  <h3 className=\"text-xl font-semibold text-midnight\">Global Connection</h3>\n                </div>\n                <p className=\"text-cool-gray text-center\">\n                  Stories transcend borders. Connect with souls from around the world, \n                  united by shared human experiences and emotions.\n                </p>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Story Section */}\n          <Card className=\"bg-moonlight/10 backdrop-blur-sm border-lavender/20 mb-12\">\n            <CardContent className=\"p-8\">\n              <h2 className=\"text-2xl font-bold text-white mb-6 text-center\">How It Started</h2>\n              <div className=\"prose prose-lg text-cool-gray max-w-none\">\n                <p className=\"mb-4\">\n                  Whispering Walls was born from a simple observation: people carry beautiful, painful, \n                  profound stories within them, but often lack a safe space to share them. In our \n                  hyper-connected yet often isolating digital world, we wanted to create something different.\n                </p>\n                <p className=\"mb-4\">\n                  We envisioned digital walls where people could write their secrets, hopes, fears, and \n                  dreams—just like the ancient practice of leaving messages on physical walls. But these \n                  walls would be infinite, accessible to all, and completely anonymous.\n                </p>\n                <p>\n                  Every whisper shared here adds to a collective tapestry of human experience, reminding \n                  us that we are never truly alone in our struggles, our joys, or our journeys.\n                </p>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Features Section */}\n          <div className=\"mb-12\">\n            <h2 className=\"text-2xl font-bold text-white mb-8 text-center\">What Makes Us Special</h2>\n            <div className=\"space-y-6\">\n              <div className=\"flex items-start space-x-4\">\n                <div className=\"bg-coral/20 rounded-full p-3 flex-shrink-0\">\n                  <i className=\"fas fa-user-secret text-coral\"></i>\n                </div>\n                <div>\n                  <h3 className=\"text-lg font-semibold text-white mb-2\">Complete Anonymity</h3>\n                  <p className=\"text-cool-gray\">\n                    No accounts, no logins, no tracking. Your whispers are truly anonymous.\n                  </p>\n                </div>\n              </div>\n              \n              <div className=\"flex items-start space-x-4\">\n                <div className=\"bg-lavender/20 rounded-full p-3 flex-shrink-0\">\n                  <i className=\"fas fa-tags text-lavender\"></i>\n                </div>\n                <div>\n                  <h3 className=\"text-lg font-semibold text-white mb-2\">Emotional Tagging</h3>\n                  <p className=\"text-cool-gray\">\n                    Express your mood and topic to connect with others who share similar experiences.\n                  </p>\n                </div>\n              </div>\n              \n              <div className=\"flex items-start space-x-4\">\n                <div className=\"bg-coral/20 rounded-full p-3 flex-shrink-0\">\n                  <i className=\"fas fa-calendar-alt text-coral\"></i>\n                </div>\n                <div>\n                  <h3 className=\"text-lg font-semibold text-white mb-2\">Daily Themes</h3>\n                  <p className=\"text-cool-gray\">\n                    Guided prompts help you explore and share specific aspects of your experience.\n                  </p>\n                </div>\n              </div>\n              \n              <div className=\"flex items-start space-x-4\">\n                <div className=\"bg-lavender/20 rounded-full p-3 flex-shrink-0\">\n                  <i className=\"fas fa-comments text-lavender\"></i>\n                </div>\n                <div>\n                  <h3 className=\"text-lg font-semibold text-white mb-2\">Supportive Community</h3>\n                  <p className=\"text-cool-gray\">\n                    Respond to whispers with empathy and support, creating connections that heal.\n                  </p>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          {/* Call to Action */}\n          <Card className=\"bg-gradient-to-r from-coral/10 to-lavender/10 border-gradient-to-r border-coral/30 border-lavender/30\">\n            <CardContent className=\"p-8 text-center\">\n              <h2 className=\"text-2xl font-bold text-white mb-4\">Ready to Share Your Story?</h2>\n              <p className=\"text-cool-gray mb-6 text-lg\">\n                Join thousands of souls who have found their voice on Whispering Walls.\n              </p>\n              <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n                <a href=\"/submit\" className=\"bg-gradient-to-r from-coral to-lavender text-white px-6 py-3 rounded-full font-medium hover:from-coral/80 hover:to-lavender/80 transition-all duration-300 inline-block\">\n                  <i className=\"fas fa-feather-alt mr-2\"></i>\n                  Share Your Whisper\n                </a>\n                <a href=\"/browse\" className=\"border-2 border-lavender/50 text-lavender px-6 py-3 rounded-full font-medium hover:bg-lavender/10 transition-all duration-300 inline-block\">\n                  <i className=\"fas fa-eye mr-2\"></i>\n                  Explore Whispers\n                </a>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </section>\n\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":9776},"client/src/pages/admin-dashboard.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useLocation } from \"wouter\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport Navigation from \"@/components/navigation\";\nimport Footer from \"@/components/footer\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\n\nexport default function AdminDashboard() {\n  const { toast } = useToast();\n  const { isAuthenticated, isLoading } = useAuth();\n  const [, setLocation] = useLocation();\n  const queryClient = useQueryClient();\n\n  // Theme form state\n  const [themeTitle, setThemeTitle] = useState(\"\");\n  const [themeDescription, setThemeDescription] = useState(\"\");\n  const [themeStartDate, setThemeStartDate] = useState(\"\");\n  const [themeEndDate, setThemeEndDate] = useState(\"\");\n\n  // Tag form state\n  const [newMoodTag, setNewMoodTag] = useState(\"\");\n  const [newTopicTag, setNewTopicTag] = useState(\"\");\n\n  // Redirect to login if not authenticated\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  const { data: stats, isLoading: statsLoading } = useQuery({\n    queryKey: [\"/api/admin/stats\"],\n    retry: false,\n  });\n\n  const { data: flaggedContent, isLoading: flaggedLoading } = useQuery({\n    queryKey: [\"/api/admin/flagged\"],\n    retry: false,\n  });\n\n  const { data: tags } = useQuery({\n    queryKey: [\"/api/tags\"],\n  });\n\n  const createThemeMutation = useMutation({\n    mutationFn: async (data: any) => {\n      await apiRequest(\"POST\", \"/api/admin/themes\", data);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Theme created successfully!\",\n        description: \"The new theme has been added.\",\n      });\n      setThemeTitle(\"\");\n      setThemeDescription(\"\");\n      setThemeStartDate(\"\");\n      setThemeEndDate(\"\");\n      queryClient.invalidateQueries({ queryKey: [\"/api/themes\"] });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error creating theme\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const createMoodTagMutation = useMutation({\n    mutationFn: async (data: any) => {\n      await apiRequest(\"POST\", \"/api/admin/tags/mood\", data);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Mood tag created successfully!\",\n      });\n      setNewMoodTag(\"\");\n      queryClient.invalidateQueries({ queryKey: [\"/api/tags\"] });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error creating mood tag\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const createTopicTagMutation = useMutation({\n    mutationFn: async (data: any) => {\n      await apiRequest(\"POST\", \"/api/admin/tags/topic\", data);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Topic tag created successfully!\",\n      });\n      setNewTopicTag(\"\");\n      queryClient.invalidateQueries({ queryKey: [\"/api/tags\"] });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error creating topic tag\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteContentMutation = useMutation({\n    mutationFn: async ({ type, id }: { type: string; id: string }) => {\n      await apiRequest(\"DELETE\", `/api/admin/content/${type}/${id}`);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Content deleted successfully\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/flagged\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/stats\"] });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error deleting content\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleCreateTheme = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!themeTitle || !themeDescription || !themeStartDate || !themeEndDate) {\n      toast({\n        title: \"Please fill all fields\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    createThemeMutation.mutate({\n      title: themeTitle,\n      description: themeDescription,\n      startDate: new Date(themeStartDate).toISOString(),\n      endDate: new Date(themeEndDate).toISOString(),\n      isActive: true,\n    });\n  };\n\n  const handleCreateMoodTag = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!newMoodTag.trim()) return;\n\n    createMoodTagMutation.mutate({\n      name: newMoodTag.trim(),\n      description: `${newMoodTag} mood tag`,\n    });\n  };\n\n  const handleCreateTopicTag = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!newTopicTag.trim()) return;\n\n    createTopicTagMutation.mutate({\n      name: newTopicTag.trim(),\n      description: `${newTopicTag} topic tag`,\n    });\n  };\n\n  const handleDeleteContent = (type: string, id: string) => {\n    if (confirm(`Are you sure you want to delete this ${type}?`)) {\n      deleteContentMutation.mutate({ type, id });\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-midnight\">\n        <Navigation />\n        <div className=\"flex items-center justify-center py-20\">\n          <i className=\"fas fa-spinner fa-spin text-2xl text-cool-gray mr-4\"></i>\n          <span className=\"text-cool-gray\">Loading...</span>\n        </div>\n        <Footer />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-midnight\">\n      <Navigation />\n      \n      <section className=\"py-16 px-4\">\n        <div className=\"max-w-7xl mx-auto\">\n          <div className=\"mb-8\">\n            <h1 className=\"text-3xl font-bold text-white mb-4\">Admin Dashboard</h1>\n            <p className=\"text-cool-gray\">Monitor and moderate the Whispering Walls community</p>\n          </div>\n\n          {/* Stats Overview */}\n          {statsLoading ? (\n            <div className=\"text-center py-8\">\n              <i className=\"fas fa-spinner fa-spin text-2xl text-cool-gray\"></i>\n            </div>\n          ) : (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n              <Card className=\"bg-moonlight border-lavender/20\">\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-cool-gray/60 text-sm\">Total Whispers</p>\n                      <p className=\"text-2xl font-bold text-midnight\">{stats?.totalWhispers || 0}</p>\n                    </div>\n                    <i className=\"fas fa-feather-alt text-coral text-2xl\"></i>\n                  </div>\n                </CardContent>\n              </Card>\n              \n              <Card className=\"bg-moonlight border-lavender/20\">\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-cool-gray/60 text-sm\">Flagged Content</p>\n                      <p className=\"text-2xl font-bold text-coral\">{stats?.flaggedContent || 0}</p>\n                    </div>\n                    <i className=\"fas fa-flag text-coral text-2xl\"></i>\n                  </div>\n                </CardContent>\n              </Card>\n              \n              <Card className=\"bg-moonlight border-lavender/20\">\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-cool-gray/60 text-sm\">Total Replies</p>\n                      <p className=\"text-2xl font-bold text-midnight\">{stats?.totalReplies || 0}</p>\n                    </div>\n                    <i className=\"fas fa-comments text-lavender text-2xl\"></i>\n                  </div>\n                </CardContent>\n              </Card>\n              \n              <Card className=\"bg-moonlight border-lavender/20\">\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-cool-gray/60 text-sm\">Today's Whispers</p>\n                      <p className=\"text-2xl font-bold text-midnight\">{stats?.todayWhispers || 0}</p>\n                    </div>\n                    <i className=\"fas fa-calendar-day text-lavender text-2xl\"></i>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          )}\n\n          {/* Admin Actions Grid */}\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8 mb-8\">\n            {/* Flagged Content */}\n            <Card className=\"bg-moonlight border-lavender/20\">\n              <CardHeader>\n                <div className=\"flex items-center justify-between\">\n                  <CardTitle className=\"text-midnight\">Flagged Content</CardTitle>\n                  <Badge variant=\"destructive\">{flaggedContent?.length || 0} pending</Badge>\n                </div>\n              </CardHeader>\n              <CardContent>\n                {flaggedLoading ? (\n                  <div className=\"text-center py-4\">\n                    <i className=\"fas fa-spinner fa-spin text-cool-gray\"></i>\n                  </div>\n                ) : flaggedContent && flaggedContent.length > 0 ? (\n                  <div className=\"space-y-4 max-h-96 overflow-y-auto\">\n                    {flaggedContent.map((item: any) => (\n                      <div key={item.id} className=\"bg-moonlight/50 rounded-xl p-4 border border-coral/20\">\n                        <div className=\"flex justify-between items-start mb-3\">\n                          <span className=\"text-sm text-coral font-medium\">\n                            Reported: {item.reason}\n                          </span>\n                          <span className=\"text-xs text-cool-gray/60\">\n                            {new Date(item.createdAt).toLocaleDateString()}\n                          </span>\n                        </div>\n                        <p className=\"text-midnight text-sm mb-3 italic\">\n                          \"{(item.whisper?.text || item.reply?.text || \"\").substring(0, 100)}...\"\n                        </p>\n                        <div className=\"flex gap-2\">\n                          <Button\n                            size=\"sm\"\n                            variant=\"destructive\"\n                            onClick={() => handleDeleteContent(\n                              item.contentType,\n                              item.contentId\n                            )}\n                            disabled={deleteContentMutation.isPending}\n                          >\n                            Delete\n                          </Button>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                ) : (\n                  <div className=\"text-center py-8\">\n                    <i className=\"fas fa-check-circle text-2xl text-green-500 mb-2\"></i>\n                    <p className=\"text-cool-gray\">No flagged content</p>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n\n            {/* Tag Management */}\n            <Card className=\"bg-moonlight border-lavender/20\">\n              <CardHeader>\n                <CardTitle className=\"text-midnight\">Tag Management</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                <div>\n                  <h4 className=\"font-medium text-midnight mb-2\">Mood Tags</h4>\n                  <div className=\"flex flex-wrap gap-2 mb-4\">\n                    {tags?.moodTags?.map((tag: any) => (\n                      <Badge key={tag.id} variant=\"secondary\" className=\"bg-coral/20 text-coral\">\n                        {tag.name}\n                      </Badge>\n                    ))}\n                  </div>\n                  <form onSubmit={handleCreateMoodTag} className=\"flex gap-2\">\n                    <Input\n                      value={newMoodTag}\n                      onChange={(e) => setNewMoodTag(e.target.value)}\n                      placeholder=\"New mood tag...\"\n                      className=\"bg-moonlight/50 border-lavender/30\"\n                    />\n                    <Button \n                      type=\"submit\" \n                      size=\"sm\"\n                      disabled={createMoodTagMutation.isPending}\n                      className=\"bg-coral hover:bg-coral/80\"\n                    >\n                      Add\n                    </Button>\n                  </form>\n                </div>\n                \n                <div>\n                  <h4 className=\"font-medium text-midnight mb-2\">Topic Tags</h4>\n                  <div className=\"flex flex-wrap gap-2 mb-4\">\n                    {tags?.topicTags?.map((tag: any) => (\n                      <Badge key={tag.id} variant=\"secondary\" className=\"bg-lavender/20 text-lavender\">\n                        {tag.name}\n                      </Badge>\n                    ))}\n                  </div>\n                  <form onSubmit={handleCreateTopicTag} className=\"flex gap-2\">\n                    <Input\n                      value={newTopicTag}\n                      onChange={(e) => setNewTopicTag(e.target.value)}\n                      placeholder=\"New topic tag...\"\n                      className=\"bg-moonlight/50 border-lavender/30\"\n                    />\n                    <Button \n                      type=\"submit\" \n                      size=\"sm\"\n                      disabled={createTopicTagMutation.isPending}\n                      className=\"bg-lavender hover:bg-lavender/80 text-midnight\"\n                    >\n                      Add\n                    </Button>\n                  </form>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Theme Management */}\n          <Card className=\"bg-moonlight border-lavender/20\">\n            <CardHeader>\n              <CardTitle className=\"text-midnight\">Create New Theme</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <form onSubmit={handleCreateTheme} className=\"space-y-4\">\n                <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-4\">\n                  <div>\n                    <Input\n                      value={themeTitle}\n                      onChange={(e) => setThemeTitle(e.target.value)}\n                      placeholder=\"Theme title...\"\n                      className=\"bg-moonlight/50 border-lavender/30\"\n                    />\n                  </div>\n                  <div className=\"grid grid-cols-2 gap-2\">\n                    <Input\n                      type=\"date\"\n                      value={themeStartDate}\n                      onChange={(e) => setThemeStartDate(e.target.value)}\n                      className=\"bg-moonlight/50 border-lavender/30\"\n                    />\n                    <Input\n                      type=\"date\"\n                      value={themeEndDate}\n                      onChange={(e) => setThemeEndDate(e.target.value)}\n                      className=\"bg-moonlight/50 border-lavender/30\"\n                    />\n                  </div>\n                </div>\n                <Textarea\n                  value={themeDescription}\n                  onChange={(e) => setThemeDescription(e.target.value)}\n                  placeholder=\"Theme description...\"\n                  className=\"bg-moonlight/50 border-lavender/30\"\n                />\n                <Button \n                  type=\"submit\" \n                  disabled={createThemeMutation.isPending}\n                  className=\"bg-gradient-to-r from-coral to-lavender text-white\"\n                >\n                  {createThemeMutation.isPending ? \"Creating...\" : \"Create Theme\"}\n                </Button>\n              </form>\n            </CardContent>\n          </Card>\n        </div>\n      </section>\n\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":17779},"client/src/pages/admin-login.tsx":{"content":"import { useEffect } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useLocation } from \"wouter\";\nimport Navigation from \"@/components/navigation\";\nimport Footer from \"@/components/footer\";\nimport { Button } from \"@/components/ui/button\";\n\nexport default function AdminLogin() {\n  const { isAuthenticated, user } = useAuth();\n  const [, setLocation] = useLocation();\n\n  useEffect(() => {\n    if (isAuthenticated && user?.isAdmin) {\n      setLocation(\"/admin\");\n    }\n  }, [isAuthenticated, user, setLocation]);\n\n  const handleLogin = () => {\n    window.location.href = \"/api/login\";\n  };\n\n  return (\n    <div className=\"min-h-screen bg-midnight\">\n      <Navigation />\n      \n      <section className=\"py-16 px-4\">\n        <div className=\"max-w-md mx-auto\">\n          <div className=\"text-center mb-8\">\n            <h1 className=\"text-3xl font-bold text-white mb-4\">Admin Access</h1>\n            <p className=\"text-cool-gray\">Secure login for site administrators</p>\n          </div>\n\n          <div className=\"bg-moonlight rounded-2xl p-8 border border-lavender/20\">\n            <div className=\"text-center\">\n              <i className=\"fas fa-shield-alt text-4xl text-coral mb-6\"></i>\n              <p className=\"text-midnight mb-6\">\n                Click the button below to authenticate as an administrator using your Replit account.\n              </p>\n              <Button \n                onClick={handleLogin}\n                className=\"w-full bg-gradient-to-r from-coral to-lavender text-white py-3 rounded-xl font-medium hover:from-coral/80 hover:to-lavender/80 transition-all duration-200\"\n              >\n                <i className=\"fas fa-shield-alt mr-2\"></i>\n                Secure Login\n              </Button>\n              <p className=\"text-sm text-cool-gray/60 mt-4\">\n                Only authorized administrators can access the admin panel.\n              </p>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":2005},"client/src/pages/browse.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport Navigation from \"@/components/navigation\";\nimport Footer from \"@/components/footer\";\nimport WhisperCard from \"@/components/whisper-card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Button } from \"@/components/ui/button\";\n\nexport default function Browse() {\n  const [search, setSearch] = useState(\"\");\n  const [moodFilter, setMoodFilter] = useState(\"\");\n  const [topicFilter, setTopicFilter] = useState(\"\");\n  const [sortBy, setSortBy] = useState(\"recent\");\n  const [page, setPage] = useState(1);\n\n  const { data: tags } = useQuery({\n    queryKey: [\"/api/tags\"],\n  });\n\n  const { data: whispers, isLoading } = useQuery({\n    queryKey: [\"/api/whispers\", { search, mood: moodFilter, topic: topicFilter, sort: sortBy, page }],\n    queryFn: async () => {\n      const params = new URLSearchParams();\n      if (search) params.append(\"search\", search);\n      if (moodFilter) params.append(\"mood\", moodFilter);\n      if (topicFilter) params.append(\"topic\", topicFilter);\n      params.append(\"sort\", sortBy);\n      params.append(\"page\", page.toString());\n      params.append(\"limit\", \"12\");\n      \n      const res = await fetch(`/api/whispers?${params}`);\n      return res.json();\n    },\n  });\n\n  const handleSearchSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    setPage(1); // Reset to first page when searching\n  };\n\n  return (\n    <div className=\"min-h-screen bg-midnight\">\n      <Navigation />\n      \n      <section className=\"py-16 px-4\">\n        <div className=\"max-w-6xl mx-auto\">\n          {/* Section Header */}\n          <div className=\"text-center mb-12\">\n            <h1 className=\"text-3xl md:text-4xl font-bold text-white mb-4\">Browse Whispers</h1>\n            <p className=\"text-cool-gray text-lg\">Anonymous stories from hearts around the world</p>\n          </div>\n\n          {/* Filters and Search */}\n          <div className=\"bg-moonlight/10 backdrop-blur-sm rounded-2xl p-6 mb-8 border border-lavender/20\">\n            <form onSubmit={handleSearchSubmit} className=\"flex flex-col lg:flex-row gap-4 items-center\">\n              {/* Search Bar */}\n              <div className=\"flex-1 relative\">\n                <Input\n                  type=\"text\"\n                  placeholder=\"Search whispers...\"\n                  value={search}\n                  onChange={(e) => setSearch(e.target.value)}\n                  className=\"w-full bg-moonlight/20 border border-lavender/30 rounded-xl px-4 py-3 pl-12 text-cool-gray placeholder-cool-gray/60 focus:outline-none focus:border-coral focus:ring-2 focus:ring-coral/20\"\n                />\n                <i className=\"fas fa-search absolute left-4 top-1/2 transform -translate-y-1/2 text-cool-gray/60\"></i>\n              </div>\n              \n              {/* Filter Dropdowns */}\n              <div className=\"flex flex-wrap gap-3\">\n                <Select value={moodFilter} onValueChange={setMoodFilter}>\n                  <SelectTrigger className=\"bg-moonlight/20 border border-lavender/30 rounded-xl px-4 py-3 text-cool-gray focus:outline-none focus:border-coral w-40\">\n                    <SelectValue placeholder=\"All Moods\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"\">All Moods</SelectItem>\n                    {tags?.moodTags?.map((tag: any) => (\n                      <SelectItem key={tag.id} value={tag.id}>{tag.name}</SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n                \n                <Select value={topicFilter} onValueChange={setTopicFilter}>\n                  <SelectTrigger className=\"bg-moonlight/20 border border-lavender/30 rounded-xl px-4 py-3 text-cool-gray focus:outline-none focus:border-coral w-40\">\n                    <SelectValue placeholder=\"All Topics\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"\">All Topics</SelectItem>\n                    {tags?.topicTags?.map((tag: any) => (\n                      <SelectItem key={tag.id} value={tag.id}>{tag.name}</SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n                \n                <Select value={sortBy} onValueChange={setSortBy}>\n                  <SelectTrigger className=\"bg-moonlight/20 border border-lavender/30 rounded-xl px-4 py-3 text-cool-gray focus:outline-none focus:border-coral w-40\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"recent\">Recent</SelectItem>\n                    <SelectItem value=\"popular\">Most Popular</SelectItem>\n                    <SelectItem value=\"discussed\">Most Discussed</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n            </form>\n          </div>\n\n          {/* Whisper Cards Grid */}\n          {isLoading ? (\n            <div className=\"text-center py-12\">\n              <i className=\"fas fa-spinner fa-spin text-2xl text-cool-gray mb-4\"></i>\n              <p className=\"text-cool-gray\">Loading whispers...</p>\n            </div>\n          ) : whispers && whispers.length > 0 ? (\n            <>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-8\">\n                {whispers.map((whisper: any, index: number) => (\n                  <div key={whisper.id} className=\"fade-in\" style={{animationDelay: `${index * 100}ms`}}>\n                    <WhisperCard whisper={whisper} />\n                  </div>\n                ))}\n              </div>\n\n              {/* Load More Button */}\n              <div className=\"text-center\">\n                <Button \n                  onClick={() => setPage(page + 1)}\n                  variant=\"outline\"\n                  className=\"bg-moonlight/20 border border-lavender/30 text-cool-gray px-8 py-3 rounded-xl hover:bg-moonlight/30 hover:border-coral/30 transition-all duration-200\"\n                >\n                  Load More Whispers\n                </Button>\n              </div>\n            </>\n          ) : (\n            <div className=\"text-center py-12\">\n              <i className=\"fas fa-search text-4xl text-cool-gray/50 mb-4\"></i>\n              <p className=\"text-cool-gray text-lg mb-2\">No whispers found</p>\n              <p className=\"text-cool-gray/60\">Try adjusting your filters or search terms</p>\n            </div>\n          )}\n        </div>\n      </section>\n\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":6690},"client/src/pages/contact.tsx":{"content":"import { useState } from \"react\";\nimport Navigation from \"@/components/navigation\";\nimport Footer from \"@/components/footer\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function Contact() {\n  const { toast } = useToast();\n  const [formData, setFormData] = useState({\n    name: \"\",\n    email: \"\",\n    subject: \"\",\n    message: \"\",\n  });\n  const [isSubmitting, setIsSubmitting] = useState(false);\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n    const { name, value } = e.target;\n    setFormData(prev => ({\n      ...prev,\n      [name]: value\n    }));\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!formData.name || !formData.email || !formData.message) {\n      toast({\n        title: \"Please fill all required fields\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setIsSubmitting(true);\n    \n    // Simulate form submission - in a real app, this would call an API\n    try {\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      \n      toast({\n        title: \"Message sent successfully!\",\n        description: \"We'll get back to you within 24 hours.\",\n      });\n      \n      setFormData({\n        name: \"\",\n        email: \"\",\n        subject: \"\",\n        message: \"\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Error sending message\",\n        description: \"Please try again later.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-midnight\">\n      <Navigation />\n      \n      <section className=\"py-16 px-4\">\n        <div className=\"max-w-4xl mx-auto\">\n          {/* Header */}\n          <div className=\"text-center mb-12\">\n            <h1 className=\"text-3xl md:text-4xl font-bold text-white mb-4\">Contact Us</h1>\n            <p className=\"text-cool-gray text-lg\">\n              We're here to help and listen. Reach out with any questions or concerns.\n            </p>\n          </div>\n\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n            {/* Contact Form */}\n            <Card className=\"bg-moonlight border-lavender/20\">\n              <CardHeader>\n                <CardTitle className=\"text-midnight flex items-center\">\n                  <i className=\"fas fa-envelope text-coral mr-3\"></i>\n                  Send us a Message\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <form onSubmit={handleSubmit} className=\"space-y-6\">\n                  <div>\n                    <label className=\"block text-cool-gray font-medium mb-2\">\n                      Name <span className=\"text-coral\">*</span>\n                    </label>\n                    <Input\n                      type=\"text\"\n                      name=\"name\"\n                      value={formData.name}\n                      onChange={handleInputChange}\n                      className=\"bg-moonlight/50 border-lavender/30 text-midnight\"\n                      placeholder=\"Your name\"\n                      required\n                    />\n                  </div>\n\n                  <div>\n                    <label className=\"block text-cool-gray font-medium mb-2\">\n                      Email <span className=\"text-coral\">*</span>\n                    </label>\n                    <Input\n                      type=\"email\"\n                      name=\"email\"\n                      value={formData.email}\n                      onChange={handleInputChange}\n                      className=\"bg-moonlight/50 border-lavender/30 text-midnight\"\n                      placeholder=\"your@email.com\"\n                      required\n                    />\n                  </div>\n\n                  <div>\n                    <label className=\"block text-cool-gray font-medium mb-2\">\n                      Subject\n                    </label>\n                    <Input\n                      type=\"text\"\n                      name=\"subject\"\n                      value={formData.subject}\n                      onChange={handleInputChange}\n                      className=\"bg-moonlight/50 border-lavender/30 text-midnight\"\n                      placeholder=\"What's this about?\"\n                    />\n                  </div>\n\n                  <div>\n                    <label className=\"block text-cool-gray font-medium mb-2\">\n                      Message <span className=\"text-coral\">*</span>\n                    </label>\n                    <Textarea\n                      name=\"message\"\n                      value={formData.message}\n                      onChange={handleInputChange}\n                      className=\"bg-moonlight/50 border-lavender/30 text-midnight h-32\"\n                      placeholder=\"Tell us how we can help...\"\n                      required\n                    />\n                  </div>\n\n                  <Button\n                    type=\"submit\"\n                    disabled={isSubmitting}\n                    className=\"w-full bg-gradient-to-r from-coral to-lavender text-white py-3 rounded-xl font-medium hover:from-coral/80 hover:to-lavender/80 transition-all duration-300\"\n                  >\n                    {isSubmitting ? (\n                      <>\n                        <i className=\"fas fa-spinner fa-spin mr-2\"></i>\n                        Sending...\n                      </>\n                    ) : (\n                      <>\n                        <i className=\"fas fa-paper-plane mr-2\"></i>\n                        Send Message\n                      </>\n                    )}\n                  </Button>\n\n                  <p className=\"text-sm text-cool-gray/60 text-center\">\n                    We typically respond within 24 hours during business days.\n                  </p>\n                </form>\n              </CardContent>\n            </Card>\n\n            {/* Contact Information & FAQ */}\n            <div className=\"space-y-6\">\n              {/* Contact Info */}\n              <Card className=\"bg-moonlight/10 backdrop-blur-sm border-lavender/20\">\n                <CardHeader>\n                  <CardTitle className=\"text-white flex items-center\">\n                    <i className=\"fas fa-info-circle text-lavender mr-3\"></i>\n                    Get in Touch\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div className=\"flex items-start space-x-3\">\n                    <i className=\"fas fa-clock text-coral mt-1\"></i>\n                    <div>\n                      <h4 className=\"font-semibold text-white\">Response Time</h4>\n                      <p className=\"text-cool-gray text-sm\">Usually within 24 hours</p>\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex items-start space-x-3\">\n                    <i className=\"fas fa-shield-alt text-coral mt-1\"></i>\n                    <div>\n                      <h4 className=\"font-semibold text-white\">Privacy</h4>\n                      <p className=\"text-cool-gray text-sm\">Your contact information is kept private and secure</p>\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex items-start space-x-3\">\n                    <i className=\"fas fa-heart text-coral mt-1\"></i>\n                    <div>\n                      <h4 className=\"font-semibold text-white\">Support</h4>\n                      <p className=\"text-cool-gray text-sm\">We're here to help with any questions or concerns</p>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Common Questions */}\n              <Card className=\"bg-moonlight border-lavender/20\">\n                <CardHeader>\n                  <CardTitle className=\"text-midnight\">Common Questions</CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div>\n                    <h4 className=\"font-semibold text-midnight mb-2\">How do I report inappropriate content?</h4>\n                    <p className=\"text-cool-gray text-sm\">\n                      Click the flag icon on any whisper or reply to report it to our moderation team.\n                    </p>\n                  </div>\n                  \n                  <div>\n                    <h4 className=\"font-semibold text-midnight mb-2\">Is my anonymity protected?</h4>\n                    <p className=\"text-cool-gray text-sm\">\n                      Yes, we don't store any personally identifiable information when you share whispers.\n                    </p>\n                  </div>\n                  \n                  <div>\n                    <h4 className=\"font-semibold text-midnight mb-2\">Can I delete my whisper?</h4>\n                    <p className=\"text-cool-gray text-sm\">\n                      Due to the anonymous nature of whispers, we cannot link them back to specific users for deletion.\n                    </p>\n                  </div>\n                  \n                  <div>\n                    <h4 className=\"font-semibold text-midnight mb-2\">How do you handle crisis situations?</h4>\n                    <p className=\"text-cool-gray text-sm\">\n                      While we provide community support, please contact mental health professionals or crisis hotlines for immediate help.\n                    </p>\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Quick Links */}\n              <Card className=\"bg-gradient-to-r from-coral/10 to-lavender/10 border-gradient-to-r border-coral/30 border-lavender/30\">\n                <CardContent className=\"p-6\">\n                  <h3 className=\"text-lg font-semibold text-white mb-4\">Quick Links</h3>\n                  <div className=\"space-y-2\">\n                    <a href=\"/guidelines\" className=\"block text-cool-gray hover:text-coral transition-colors\">\n                      <i className=\"fas fa-book mr-2\"></i>\n                      Community Guidelines\n                    </a>\n                    <a href=\"/about\" className=\"block text-cool-gray hover:text-coral transition-colors\">\n                      <i className=\"fas fa-info-circle mr-2\"></i>\n                      About Whispering Walls\n                    </a>\n                    <a href=\"/browse\" className=\"block text-cool-gray hover:text-coral transition-colors\">\n                      <i className=\"fas fa-eye mr-2\"></i>\n                      Browse Whispers\n                    </a>\n                    <a href=\"/submit\" className=\"block text-cool-gray hover:text-coral transition-colors\">\n                      <i className=\"fas fa-feather-alt mr-2\"></i>\n                      Share a Whisper\n                    </a>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":11262},"client/src/pages/guidelines.tsx":{"content":"import Navigation from \"@/components/navigation\";\nimport Footer from \"@/components/footer\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\n\nexport default function Guidelines() {\n  return (\n    <div className=\"min-h-screen bg-midnight\">\n      <Navigation />\n      \n      <section className=\"py-16 px-4\">\n        <div className=\"max-w-4xl mx-auto\">\n          {/* Header */}\n          <div className=\"text-center mb-12\">\n            <h1 className=\"text-3xl md:text-4xl font-bold text-white mb-4\">Community Guidelines</h1>\n            <p className=\"text-cool-gray text-lg\">\n              Creating a safe and supportive space for everyone\n            </p>\n          </div>\n\n          {/* Welcome Message */}\n          <Alert className=\"bg-moonlight/10 border-lavender/20 mb-8\">\n            <i className=\"fas fa-heart text-coral\"></i>\n            <AlertDescription className=\"text-cool-gray ml-2\">\n              Welcome to Whispering Walls! These guidelines help maintain our community as a safe, \n              respectful space where everyone can share their stories and find support.\n            </AlertDescription>\n          </Alert>\n\n          {/* Core Principles */}\n          <Card className=\"bg-moonlight border-lavender/20 mb-8\">\n            <CardHeader>\n              <CardTitle className=\"text-midnight flex items-center\">\n                <i className=\"fas fa-star text-coral mr-3\"></i>\n                Core Principles\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"flex items-start space-x-3\">\n                <div className=\"bg-coral/20 rounded-full p-2 flex-shrink-0 mt-1\">\n                  <i className=\"fas fa-shield-alt text-coral text-sm\"></i>\n                </div>\n                <div>\n                  <h3 className=\"font-semibold text-midnight mb-1\">Anonymity is Sacred</h3>\n                  <p className=\"text-cool-gray\">\n                    Never attempt to identify or \"out\" another user. Respect the anonymous nature of all whispers.\n                  </p>\n                </div>\n              </div>\n              \n              <div className=\"flex items-start space-x-3\">\n                <div className=\"bg-lavender/20 rounded-full p-2 flex-shrink-0 mt-1\">\n                  <i className=\"fas fa-heart text-lavender text-sm\"></i>\n                </div>\n                <div>\n                  <h3 className=\"font-semibold text-midnight mb-1\">Empathy First</h3>\n                  <p className=\"text-cool-gray\">\n                    Approach every whisper with understanding and compassion. Everyone has a story worth hearing.\n                  </p>\n                </div>\n              </div>\n              \n              <div className=\"flex items-start space-x-3\">\n                <div className=\"bg-coral/20 rounded-full p-2 flex-shrink-0 mt-1\">\n                  <i className=\"fas fa-hands-helping text-coral text-sm\"></i>\n                </div>\n                <div>\n                  <h3 className=\"font-semibold text-midnight mb-1\">Support, Don't Judge</h3>\n                  <p className=\"text-cool-gray\">\n                    Offer support and encouragement. Avoid judgment, criticism, or harsh responses.\n                  </p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* What's Welcome */}\n          <Card className=\"bg-moonlight border-lavender/20 mb-8\">\n            <CardHeader>\n              <CardTitle className=\"text-midnight flex items-center text-green-600\">\n                <i className=\"fas fa-check-circle mr-3\"></i>\n                What's Welcome\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <ul className=\"space-y-2 text-cool-gray\">\n                  <li className=\"flex items-center\">\n                    <i className=\"fas fa-check text-green-500 mr-2 text-sm\"></i>\n                    Personal stories and experiences\n                  </li>\n                  <li className=\"flex items-center\">\n                    <i className=\"fas fa-check text-green-500 mr-2 text-sm\"></i>\n                    Genuine emotions and feelings\n                  </li>\n                  <li className=\"flex items-center\">\n                    <i className=\"fas fa-check text-green-500 mr-2 text-sm\"></i>\n                    Supportive responses and encouragement\n                  </li>\n                  <li className=\"flex items-center\">\n                    <i className=\"fas fa-check text-green-500 mr-2 text-sm\"></i>\n                    Thoughtful questions and insights\n                  </li>\n                </ul>\n                <ul className=\"space-y-2 text-cool-gray\">\n                  <li className=\"flex items-center\">\n                    <i className=\"fas fa-check text-green-500 mr-2 text-sm\"></i>\n                    Poetry and creative expression\n                  </li>\n                  <li className=\"flex items-center\">\n                    <i className=\"fas fa-check text-green-500 mr-2 text-sm\"></i>\n                    Mental health discussions\n                  </li>\n                  <li className=\"flex items-center\">\n                    <i className=\"fas fa-check text-green-500 mr-2 text-sm\"></i>\n                    Relationship and life advice\n                  </li>\n                  <li className=\"flex items-center\">\n                    <i className=\"fas fa-check text-green-500 mr-2 text-sm\"></i>\n                    Gratitude and positive reflections\n                  </li>\n                </ul>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* What's Not Allowed */}\n          <Card className=\"bg-moonlight border-red-400/20 mb-8\">\n            <CardHeader>\n              <CardTitle className=\"text-midnight flex items-center text-red-600\">\n                <i className=\"fas fa-times-circle mr-3\"></i>\n                What's Not Allowed\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <ul className=\"space-y-2 text-cool-gray\">\n                  <li className=\"flex items-center\">\n                    <i className=\"fas fa-times text-red-500 mr-2 text-sm\"></i>\n                    Harassment or bullying\n                  </li>\n                  <li className=\"flex items-center\">\n                    <i className=\"fas fa-times text-red-500 mr-2 text-sm\"></i>\n                    Hate speech or discrimination\n                  </li>\n                  <li className=\"flex items-center\">\n                    <i className=\"fas fa-times text-red-500 mr-2 text-sm\"></i>\n                    Explicit sexual content\n                  </li>\n                  <li className=\"flex items-center\">\n                    <i className=\"fas fa-times text-red-500 mr-2 text-sm\"></i>\n                    Spam or promotional content\n                  </li>\n                </ul>\n                <ul className=\"space-y-2 text-cool-gray\">\n                  <li className=\"flex items-center\">\n                    <i className=\"fas fa-times text-red-500 mr-2 text-sm\"></i>\n                    Threats or violence\n                  </li>\n                  <li className=\"flex items-center\">\n                    <i className=\"fas fa-times text-red-500 mr-2 text-sm\"></i>\n                    Illegal activities\n                  </li>\n                  <li className=\"flex items-center\">\n                    <i className=\"fas fa-times text-red-500 mr-2 text-sm\"></i>\n                    Doxxing or revealing personal info\n                  </li>\n                  <li className=\"flex items-center\">\n                    <i className=\"fas fa-times text-red-500 mr-2 text-sm\"></i>\n                    Trolling or inflammatory content\n                  </li>\n                </ul>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* How to Report */}\n          <Card className=\"bg-moonlight border-lavender/20 mb-8\">\n            <CardHeader>\n              <CardTitle className=\"text-midnight flex items-center\">\n                <i className=\"fas fa-flag text-coral mr-3\"></i>\n                How to Report Content\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <p className=\"text-cool-gray mb-4\">\n                If you encounter content that violates these guidelines, please report it:\n              </p>\n              <ol className=\"list-decimal list-inside space-y-2 text-cool-gray ml-4\">\n                <li>Click the flag icon on any whisper or reply</li>\n                <li>Provide a brief reason for the report</li>\n                <li>Our moderation team will review within 24 hours</li>\n                <li>Flagged content is automatically hidden pending review</li>\n              </ol>\n            </CardContent>\n          </Card>\n\n          {/* Best Practices */}\n          <Card className=\"bg-moonlight border-lavender/20 mb-8\">\n            <CardHeader>\n              <CardTitle className=\"text-midnight flex items-center\">\n                <i className=\"fas fa-lightbulb text-lavender mr-3\"></i>\n                Best Practices for Sharing\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"bg-moonlight/50 rounded-lg p-4\">\n                <h4 className=\"font-semibold text-midnight mb-2\">💭 Before You Whisper</h4>\n                <ul className=\"text-cool-gray space-y-1 text-sm\">\n                  <li>• Take a moment to reflect on your intention</li>\n                  <li>• Consider how your words might affect others</li>\n                  <li>• Remember that once shared, whispers become part of the community</li>\n                </ul>\n              </div>\n              \n              <div className=\"bg-moonlight/50 rounded-lg p-4\">\n                <h4 className=\"font-semibold text-midnight mb-2\">🤝 When Responding</h4>\n                <ul className=\"text-cool-gray space-y-1 text-sm\">\n                  <li>• Lead with empathy and understanding</li>\n                  <li>• Share similar experiences if helpful</li>\n                  <li>• Avoid giving unsolicited advice unless asked</li>\n                  <li>• Use \"I\" statements to share your perspective</li>\n                </ul>\n              </div>\n              \n              <div className=\"bg-moonlight/50 rounded-lg p-4\">\n                <h4 className=\"font-semibold text-midnight mb-2\">🌟 Creating Safe Space</h4>\n                <ul className=\"text-cool-gray space-y-1 text-sm\">\n                  <li>• Validate others' feelings and experiences</li>\n                  <li>• Use content warnings for sensitive topics</li>\n                  <li>• Respect different perspectives and backgrounds</li>\n                  <li>• Remember that healing looks different for everyone</li>\n                </ul>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Mental Health Resources */}\n          <Alert className=\"bg-lavender/10 border-lavender/30 mb-8\">\n            <i className=\"fas fa-heart text-lavender\"></i>\n            <AlertDescription className=\"text-cool-gray ml-2\">\n              <strong>Important:</strong> While our community provides emotional support, we are not a substitute for professional mental health care. \n              If you're experiencing a crisis, please reach out to a mental health professional or crisis hotline in your area.\n            </AlertDescription>\n          </Alert>\n\n          {/* Contact */}\n          <Card className=\"bg-gradient-to-r from-coral/10 to-lavender/10 border-gradient-to-r border-coral/30 border-lavender/30\">\n            <CardContent className=\"p-6 text-center\">\n              <h3 className=\"text-xl font-semibold text-white mb-3\">Questions or Concerns?</h3>\n              <p className=\"text-cool-gray mb-4\">\n                Our community team is here to help ensure Whispering Walls remains a safe space for everyone.\n              </p>\n              <a \n                href=\"/contact\" \n                className=\"inline-block bg-gradient-to-r from-coral to-lavender text-white px-6 py-2 rounded-full font-medium hover:from-coral/80 hover:to-lavender/80 transition-all duration-300\"\n              >\n                Contact Us\n              </a>\n            </CardContent>\n          </Card>\n        </div>\n      </section>\n\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":12659},"client/src/pages/home.tsx":{"content":"import { Link } from \"wouter\";\nimport Navigation from \"@/components/navigation\";\nimport Footer from \"@/components/footer\";\nimport { Button } from \"@/components/ui/button\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport WhisperCard from \"@/components/whisper-card\";\nimport { useQuery } from \"@tanstack/react-query\";\n\nexport default function Home() {\n  const { user } = useAuth();\n  \n  const { data: recentWhispers } = useQuery({\n    queryKey: [\"/api/whispers\"],\n    queryFn: async () => {\n      const res = await fetch(\"/api/whispers?limit=6&sort=recent\");\n      return res.json();\n    },\n  });\n\n  const { data: currentTheme } = useQuery({\n    queryKey: [\"/api/themes/current\"],\n  });\n\n  return (\n    <div className=\"min-h-screen bg-midnight\">\n      <Navigation />\n      \n      {/* Welcome Section */}\n      <section className=\"py-16 px-4\">\n        <div className=\"max-w-4xl mx-auto text-center\">\n          <h1 className=\"text-3xl md:text-5xl font-bold text-white mb-6\">\n            Welcome back{user?.firstName ? `, ${user.firstName}` : ''}\n          </h1>\n          <p className=\"text-lg text-cool-gray mb-8\">\n            Ready to share your thoughts or explore what others are whispering?\n          </p>\n          \n          <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n            <Link href=\"/submit\">\n              <Button className=\"bg-gradient-to-r from-coral to-lavender text-white px-6 py-3 rounded-full font-medium hover:from-coral/80 hover:to-lavender/80 transition-all duration-300\">\n                <i className=\"fas fa-feather-alt mr-2\"></i>\n                Share a Whisper\n              </Button>\n            </Link>\n            <Link href=\"/browse\">\n              <Button variant=\"outline\" className=\"border-lavender/50 text-lavender px-6 py-3 rounded-full font-medium hover:bg-lavender/10\">\n                <i className=\"fas fa-eye mr-2\"></i>\n                Browse Whispers\n              </Button>\n            </Link>\n          </div>\n        </div>\n      </section>\n\n      {/* Current Theme */}\n      {currentTheme && (\n        <section className=\"py-12 px-4\">\n          <div className=\"max-w-4xl mx-auto\">\n            <div className=\"bg-moonlight/10 backdrop-blur-sm rounded-2xl p-8 border border-lavender/20\">\n              <div className=\"text-center mb-6\">\n                <h2 className=\"text-2xl font-bold text-white mb-2\">Today's Theme</h2>\n                <div className=\"w-16 h-1 bg-gradient-to-r from-coral to-lavender mx-auto rounded-full\"></div>\n              </div>\n              <h3 className=\"text-xl font-semibold text-coral mb-4 text-center\">{currentTheme.title}</h3>\n              <p className=\"text-cool-gray text-center mb-6\">{currentTheme.description}</p>\n              <div className=\"text-center\">\n                <Link href={`/themes?current=${currentTheme.id}`}>\n                  <Button variant=\"outline\" className=\"border-coral/50 text-coral hover:bg-coral/10\">\n                    Join the Theme\n                  </Button>\n                </Link>\n              </div>\n            </div>\n          </div>\n        </section>\n      )}\n\n      {/* Recent Whispers */}\n      <section className=\"py-12 px-4\">\n        <div className=\"max-w-6xl mx-auto\">\n          <div className=\"text-center mb-12\">\n            <h2 className=\"text-3xl font-bold text-white mb-4\">Recent Whispers</h2>\n            <p className=\"text-cool-gray\">Fresh stories from the community</p>\n          </div>\n          \n          {recentWhispers && recentWhispers.length > 0 ? (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-8\">\n              {recentWhispers.map((whisper: any, index: number) => (\n                <div key={whisper.id} className=\"fade-in\" style={{animationDelay: `${index * 100}ms`}}>\n                  <WhisperCard whisper={whisper} />\n                </div>\n              ))}\n            </div>\n          ) : (\n            <div className=\"text-center py-12\">\n              <i className=\"fas fa-feather-alt text-4xl text-cool-gray/50 mb-4\"></i>\n              <p className=\"text-cool-gray\">No whispers yet. Be the first to share!</p>\n            </div>\n          )}\n          \n          <div className=\"text-center\">\n            <Link href=\"/browse\">\n              <Button variant=\"outline\" className=\"border-lavender/50 text-lavender hover:bg-lavender/10\">\n                View All Whispers\n              </Button>\n            </Link>\n          </div>\n        </div>\n      </section>\n\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":4510},"client/src/pages/landing.tsx":{"content":"import { Link } from \"wouter\";\nimport Navigation from \"@/components/navigation\";\nimport Footer from \"@/components/footer\";\nimport { Button } from \"@/components/ui/button\";\n\nexport default function Landing() {\n  return (\n    <div className=\"min-h-screen bg-midnight\">\n      <Navigation />\n      \n      {/* Hero Section */}\n      <section className=\"relative py-20 px-4\">\n        {/* Subtle background pattern with scattered dots representing whispers */}\n        <div className=\"absolute inset-0 overflow-hidden\">\n          <div className=\"absolute top-20 left-20 w-2 h-2 bg-lavender/30 rounded-full\"></div>\n          <div className=\"absolute top-40 right-32 w-1 h-1 bg-coral/40 rounded-full\"></div>\n          <div className=\"absolute bottom-32 left-1/4 w-1.5 h-1.5 bg-lavender/20 rounded-full\"></div>\n          <div className=\"absolute top-60 left-1/2 w-1 h-1 bg-coral/30 rounded-full\"></div>\n          <div className=\"absolute bottom-20 right-20 w-2 h-2 bg-lavender/25 rounded-full\"></div>\n        </div>\n        \n        <div className=\"max-w-4xl mx-auto text-center relative\">\n          <h1 className=\"text-4xl md:text-6xl font-bold text-white mb-6 fade-in\">\n            Where Secrets Find\n            <span className=\"text-transparent bg-clip-text bg-gradient-to-r from-coral to-lavender ml-4\">\n              Their Voice\n            </span>\n          </h1>\n          <p className=\"text-xl md:text-2xl text-cool-gray mb-12 max-w-2xl mx-auto fade-in\">\n            Share your whispers anonymously. Connect through stories. \n            Find comfort in the collective human experience.\n          </p>\n          \n          <div className=\"flex flex-col sm:flex-row gap-4 justify-center items-center fade-in\">\n            <Link href=\"/submit\">\n              <Button className=\"bg-gradient-to-r from-coral to-lavender text-white px-8 py-4 rounded-full text-lg font-medium hover:from-coral/80 hover:to-lavender/80 transition-all duration-300 transform hover:scale-105 shadow-lg\">\n                <i className=\"fas fa-feather-alt mr-2\"></i>\n                Leave Your Whisper\n              </Button>\n            </Link>\n            <Link href=\"/browse\">\n              <Button variant=\"outline\" className=\"border-2 border-lavender/50 text-lavender px-8 py-4 rounded-full text-lg font-medium hover:bg-lavender/10 transition-all duration-300\">\n                <i className=\"fas fa-headphones mr-2\"></i>\n                Hear the Whispers\n              </Button>\n            </Link>\n          </div>\n        </div>\n      </section>\n\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":2558},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/submit.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport Navigation from \"@/components/navigation\";\nimport Footer from \"@/components/footer\";\nimport { Button } from \"@/components/ui/button\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\nexport default function Submit() {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  const [text, setText] = useState(\"\");\n  const [nickname, setNickname] = useState(\"\");\n  const [moodTagId, setMoodTagId] = useState(\"\");\n  const [topicTagId, setTopicTagId] = useState(\"\");\n\n  const { data: tags } = useQuery({\n    queryKey: [\"/api/tags\"],\n  });\n\n  const submitMutation = useMutation({\n    mutationFn: async (data: any) => {\n      await apiRequest(\"POST\", \"/api/whispers\", data);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Whisper shared successfully!\",\n        description: \"Your anonymous whisper has been shared with the community.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/whispers\"] });\n      setLocation(\"/browse\");\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error sharing whisper\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!text.trim()) {\n      toast({\n        title: \"Please enter your whisper\",\n        description: \"Your whisper cannot be empty.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (text.length > 200) {\n      toast({\n        title: \"Whisper too long\",\n        description: \"Please keep your whisper under 200 characters.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const whisperData: any = {\n      text: text.trim(),\n    };\n\n    if (nickname.trim()) {\n      whisperData.nickname = nickname.trim();\n    }\n\n    if (moodTagId) {\n      whisperData.moodTagId = moodTagId;\n    }\n\n    if (topicTagId) {\n      whisperData.topicTagId = topicTagId;\n    }\n\n    submitMutation.mutate(whisperData);\n  };\n\n  const remainingChars = 200 - text.length;\n\n  return (\n    <div className=\"min-h-screen bg-midnight\">\n      <Navigation />\n      \n      <section className=\"py-16 px-4\">\n        <div className=\"max-w-2xl mx-auto\">\n          <div className=\"text-center mb-8\">\n            <h1 className=\"text-3xl md:text-4xl font-bold text-white mb-4\">Share Your Whisper</h1>\n            <p className=\"text-cool-gray text-lg\">Your story matters. Share it safely and anonymously.</p>\n          </div>\n\n          <div className=\"bg-moonlight rounded-2xl p-8 border border-lavender/20\">\n            <form onSubmit={handleSubmit}>\n              {/* Whisper Text Area */}\n              <div className=\"mb-6\">\n                <label className=\"block text-cool-gray font-medium mb-3\">Your Whisper</label>\n                <Textarea\n                  value={text}\n                  onChange={(e) => setText(e.target.value)}\n                  className=\"w-full h-32 bg-moonlight/50 border border-lavender/30 rounded-xl px-4 py-3 text-midnight placeholder-cool-gray/60 focus:outline-none focus:border-coral focus:ring-2 focus:ring-coral/20 resize-none\"\n                  placeholder=\"Share what's on your heart... (200 characters max)\"\n                  maxLength={200}\n                />\n                <div className=\"flex justify-between items-center mt-2\">\n                  <span className=\"text-sm text-cool-gray/60\">Characters remaining:</span>\n                  <span className={`text-sm font-medium ${remainingChars < 20 ? 'text-coral' : 'text-cool-gray'}`}>\n                    {remainingChars}\n                  </span>\n                </div>\n              </div>\n\n              {/* Tags */}\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6 mb-6\">\n                <div>\n                  <label className=\"block text-cool-gray font-medium mb-3\">Mood (Optional)</label>\n                  <Select value={moodTagId} onValueChange={setMoodTagId}>\n                    <SelectTrigger className=\"w-full bg-moonlight/50 border border-lavender/30 rounded-xl px-4 py-3 text-midnight focus:outline-none focus:border-coral\">\n                      <SelectValue placeholder=\"Choose a mood...\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {tags?.moodTags?.map((tag: any) => (\n                        <SelectItem key={tag.id} value={tag.id}>{tag.name}</SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n                \n                <div>\n                  <label className=\"block text-cool-gray font-medium mb-3\">Topic (Optional)</label>\n                  <Select value={topicTagId} onValueChange={setTopicTagId}>\n                    <SelectTrigger className=\"w-full bg-moonlight/50 border border-lavender/30 rounded-xl px-4 py-3 text-midnight focus:outline-none focus:border-coral\">\n                      <SelectValue placeholder=\"Choose a topic...\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {tags?.topicTags?.map((tag: any) => (\n                        <SelectItem key={tag.id} value={tag.id}>{tag.name}</SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n\n              {/* Anonymous Options */}\n              <div className=\"mb-6\">\n                <label className=\"block text-cool-gray font-medium mb-3\">Nickname (Optional)</label>\n                <Input\n                  type=\"text\"\n                  value={nickname}\n                  onChange={(e) => setNickname(e.target.value)}\n                  className=\"w-full bg-moonlight/50 border border-lavender/30 rounded-xl px-4 py-3 text-midnight placeholder-cool-gray/60 focus:outline-none focus:border-coral focus:ring-2 focus:ring-coral/20\"\n                  placeholder=\"Choose a nickname or leave blank for full anonymity\"\n                  maxLength={50}\n                />\n                <p className=\"text-sm text-cool-gray/60 mt-2\">\n                  <i className=\"fas fa-shield-alt mr-1\"></i>\n                  No registration required. Your identity remains completely anonymous.\n                </p>\n              </div>\n\n              {/* Submit Button */}\n              <Button \n                type=\"submit\" \n                disabled={submitMutation.isPending}\n                className=\"w-full bg-gradient-to-r from-coral to-lavender text-white py-4 rounded-xl font-medium text-lg hover:from-coral/80 hover:to-lavender/80 transition-all duration-300 transform hover:scale-[1.02]\"\n              >\n                {submitMutation.isPending ? (\n                  <>\n                    <i className=\"fas fa-spinner fa-spin mr-2\"></i>\n                    Sharing...\n                  </>\n                ) : (\n                  <>\n                    <i className=\"fas fa-feather-alt mr-2\"></i>\n                    Share Your Whisper\n                  </>\n                )}\n              </Button>\n\n              <p className=\"text-center text-sm text-cool-gray/60 mt-4\">\n                By sharing, you agree to our community guidelines of respect and kindness.\n              </p>\n            </form>\n          </div>\n        </div>\n      </section>\n\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":7748},"client/src/pages/themes.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Link, useLocation } from \"wouter\";\nimport Navigation from \"@/components/navigation\";\nimport Footer from \"@/components/footer\";\nimport WhisperCard from \"@/components/whisper-card\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\n\nexport default function Themes() {\n  const [location] = useLocation();\n  const urlParams = new URLSearchParams(window.location.search);\n  const currentThemeId = urlParams.get('current');\n\n  const { data: currentTheme } = useQuery({\n    queryKey: [\"/api/themes/current\"],\n  });\n\n  const { data: allThemes } = useQuery({\n    queryKey: [\"/api/themes\"],\n  });\n\n  const { data: themeWhispers } = useQuery({\n    queryKey: [\"/api/whispers\", { theme: currentThemeId || currentTheme?.id }],\n    queryFn: async () => {\n      const themeId = currentThemeId || currentTheme?.id;\n      if (!themeId) return [];\n      \n      const params = new URLSearchParams();\n      params.append(\"theme\", themeId);\n      params.append(\"limit\", \"12\");\n      \n      const res = await fetch(`/api/whispers?${params}`);\n      return res.json();\n    },\n    enabled: !!(currentThemeId || currentTheme?.id),\n  });\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString('en-US', {\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric'\n    });\n  };\n\n  const isThemeActive = (theme: any) => {\n    const now = new Date();\n    const start = new Date(theme.startDate);\n    const end = new Date(theme.endDate);\n    return now >= start && now <= end && theme.isActive;\n  };\n\n  return (\n    <div className=\"min-h-screen bg-midnight\">\n      <Navigation />\n      \n      <section className=\"py-16 px-4\">\n        <div className=\"max-w-6xl mx-auto\">\n          {/* Section Header */}\n          <div className=\"text-center mb-12\">\n            <h1 className=\"text-3xl md:text-4xl font-bold text-white mb-4\">Daily Themes</h1>\n            <p className=\"text-cool-gray text-lg\">Join the conversation with guided prompts and themes</p>\n          </div>\n\n          {/* Current Theme */}\n          {currentTheme && (\n            <Card className=\"bg-moonlight/10 backdrop-blur-sm border-lavender/20 mb-12\">\n              <CardHeader>\n                <div className=\"text-center\">\n                  <Badge className=\"bg-gradient-to-r from-coral to-lavender text-white mb-4\">\n                    Current Theme\n                  </Badge>\n                  <CardTitle className=\"text-2xl text-white mb-2\">{currentTheme.title}</CardTitle>\n                  <div className=\"w-16 h-1 bg-gradient-to-r from-coral to-lavender mx-auto rounded-full\"></div>\n                </div>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-cool-gray text-center mb-6 text-lg leading-relaxed\">\n                  {currentTheme.description}\n                </p>\n                <div className=\"text-center mb-6\">\n                  <p className=\"text-cool-gray/60 text-sm\">\n                    Active from {formatDate(currentTheme.startDate)} to {formatDate(currentTheme.endDate)}\n                  </p>\n                </div>\n                <div className=\"text-center\">\n                  <Link href=\"/submit\">\n                    <Button className=\"bg-gradient-to-r from-coral to-lavender text-white px-6 py-3 rounded-full font-medium hover:from-coral/80 hover:to-lavender/80 transition-all duration-300\">\n                      <i className=\"fas fa-feather-alt mr-2\"></i>\n                      Join This Theme\n                    </Button>\n                  </Link>\n                </div>\n              </CardContent>\n            </Card>\n          )}\n\n          {/* Theme Whispers */}\n          {themeWhispers && themeWhispers.length > 0 && (\n            <div className=\"mb-12\">\n              <h2 className=\"text-2xl font-bold text-white mb-6 text-center\">\n                Whispers for This Theme\n              </h2>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                {themeWhispers.map((whisper: any, index: number) => (\n                  <div key={whisper.id} className=\"fade-in\" style={{animationDelay: `${index * 100}ms`}}>\n                    <WhisperCard whisper={whisper} />\n                  </div>\n                ))}\n              </div>\n            </div>\n          )}\n\n          {/* All Themes Archive */}\n          <div>\n            <h2 className=\"text-2xl font-bold text-white mb-8 text-center\">Theme Archive</h2>\n            \n            {allThemes && allThemes.length > 0 ? (\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                {allThemes.map((theme: any) => (\n                  <Card key={theme.id} className=\"bg-moonlight border-lavender/20 hover:border-coral/30 transition-all duration-300\">\n                    <CardHeader>\n                      <div className=\"flex items-start justify-between\">\n                        <CardTitle className=\"text-lg text-midnight\">{theme.title}</CardTitle>\n                        {isThemeActive(theme) ? (\n                          <Badge className=\"bg-green-500/20 text-green-600\">Active</Badge>\n                        ) : (\n                          <Badge variant=\"outline\" className=\"border-cool-gray/30 text-cool-gray/60\">\n                            Ended\n                          </Badge>\n                        )}\n                      </div>\n                    </CardHeader>\n                    <CardContent>\n                      <p className=\"text-cool-gray mb-4 leading-relaxed\">\n                        {theme.description}\n                      </p>\n                      <div className=\"flex justify-between items-center text-sm text-cool-gray/60\">\n                        <span>{formatDate(theme.startDate)}</span>\n                        <span>→</span>\n                        <span>{formatDate(theme.endDate)}</span>\n                      </div>\n                      \n                      {isThemeActive(theme) && (\n                        <div className=\"mt-4\">\n                          <Link href={`/themes?current=${theme.id}`}>\n                            <Button variant=\"outline\" className=\"w-full border-coral/50 text-coral hover:bg-coral/10\">\n                              View Theme Whispers\n                            </Button>\n                          </Link>\n                        </div>\n                      )}\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            ) : (\n              <div className=\"text-center py-12\">\n                <i className=\"fas fa-calendar-day text-4xl text-cool-gray/50 mb-4\"></i>\n                <p className=\"text-cool-gray text-lg mb-2\">No themes available</p>\n                <p className=\"text-cool-gray/60\">Check back soon for new themes and prompts</p>\n              </div>\n            )}\n          </div>\n        </div>\n      </section>\n\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":7086},"client/src/pages/whisper-thread.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useRoute } from \"wouter\";\nimport Navigation from \"@/components/navigation\";\nimport Footer from \"@/components/footer\";\nimport { Button } from \"@/components/ui/button\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Input } from \"@/components/ui/input\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\nexport default function WhisperThread() {\n  const [, params] = useRoute(\"/whisper/:id\");\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  const [replyText, setReplyText] = useState(\"\");\n  const [replyNickname, setReplyNickname] = useState(\"\");\n\n  const { data: whisper, isLoading } = useQuery({\n    queryKey: [\"/api/whispers\", params?.id],\n    enabled: !!params?.id,\n  });\n\n  const replyMutation = useMutation({\n    mutationFn: async (data: any) => {\n      await apiRequest(\"POST\", `/api/whispers/${params?.id}/replies`, data);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Reply posted successfully!\",\n        description: \"Your reply has been added to the conversation.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/whispers\", params?.id] });\n      setReplyText(\"\");\n      setReplyNickname(\"\");\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error posting reply\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const voteMutation = useMutation({\n    mutationFn: async ({ contentType, contentId, voteType }: any) => {\n      await apiRequest(\"POST\", \"/api/vote\", { contentType, contentId, voteType });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/whispers\", params?.id] });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error recording vote\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const reportMutation = useMutation({\n    mutationFn: async ({ contentType, contentId, reason }: any) => {\n      await apiRequest(\"POST\", \"/api/report\", { contentType, contentId, reason });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Content reported\",\n        description: \"Thank you for helping keep our community safe.\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error reporting content\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleReplySubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!replyText.trim()) {\n      toast({\n        title: \"Please enter your reply\",\n        description: \"Your reply cannot be empty.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (replyText.length > 200) {\n      toast({\n        title: \"Reply too long\",\n        description: \"Please keep your reply under 200 characters.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const replyData: any = {\n      text: replyText.trim(),\n    };\n\n    if (replyNickname.trim()) {\n      replyData.nickname = replyNickname.trim();\n    }\n\n    replyMutation.mutate(replyData);\n  };\n\n  const handleVote = (contentType: string, contentId: string, voteType: string) => {\n    voteMutation.mutate({ contentType, contentId, voteType });\n  };\n\n  const handleReport = (contentType: string, contentId: string) => {\n    const reason = prompt(\"Please provide a reason for reporting this content:\");\n    if (reason) {\n      reportMutation.mutate({ contentType, contentId, reason });\n    }\n  };\n\n  const formatTimeAgo = (dateString: string) => {\n    const date = new Date(dateString);\n    const now = new Date();\n    const diffInMinutes = Math.floor((now.getTime() - date.getTime()) / (1000 * 60));\n    \n    if (diffInMinutes < 1) return \"Just now\";\n    if (diffInMinutes < 60) return `${diffInMinutes}m`;\n    if (diffInMinutes < 1440) return `${Math.floor(diffInMinutes / 60)}h`;\n    return `${Math.floor(diffInMinutes / 1440)}d`;\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-midnight\">\n        <Navigation />\n        <div className=\"flex items-center justify-center py-20\">\n          <i className=\"fas fa-spinner fa-spin text-2xl text-cool-gray mr-4\"></i>\n          <span className=\"text-cool-gray\">Loading whisper...</span>\n        </div>\n        <Footer />\n      </div>\n    );\n  }\n\n  if (!whisper) {\n    return (\n      <div className=\"min-h-screen bg-midnight\">\n        <Navigation />\n        <div className=\"flex items-center justify-center py-20\">\n          <div className=\"text-center\">\n            <i className=\"fas fa-exclamation-triangle text-4xl text-cool-gray/50 mb-4\"></i>\n            <h2 className=\"text-xl text-white mb-2\">Whisper not found</h2>\n            <p className=\"text-cool-gray\">This whisper may have been deleted or doesn't exist.</p>\n          </div>\n        </div>\n        <Footer />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-midnight\">\n      <Navigation />\n      \n      <section className=\"py-16 px-4\">\n        <div className=\"max-w-4xl mx-auto\">\n          {/* Original Whisper */}\n          <div className=\"bg-moonlight rounded-2xl p-8 border border-lavender/20 mb-8\">\n            <div className=\"flex items-start justify-between mb-6\">\n              <div className=\"flex gap-3\">\n                {whisper.moodTag && (\n                  <span className=\"bg-gradient-to-r from-coral/20 to-coral/10 text-coral px-4 py-2 rounded-full font-medium\">\n                    {whisper.moodTag.name}\n                  </span>\n                )}\n                {whisper.topicTag && (\n                  <span className=\"bg-gradient-to-r from-lavender/20 to-lavender/10 text-lavender px-4 py-2 rounded-full font-medium\">\n                    {whisper.topicTag.name}\n                  </span>\n                )}\n              </div>\n              <span className=\"text-cool-gray/60\">{formatTimeAgo(whisper.createdAt)}</span>\n            </div>\n            \n            <p className=\"text-midnight text-lg leading-relaxed mb-6\">\n              {whisper.text}\n            </p>\n            \n            {whisper.nickname && (\n              <p className=\"text-coral font-medium mb-4\">— {whisper.nickname}</p>\n            )}\n            \n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center gap-6\">\n                <button \n                  onClick={() => handleVote('whisper', whisper.id, 'up')}\n                  className=\"vote-btn flex items-center gap-2 text-cool-gray/60 hover:text-coral bg-coral/10 px-4 py-2 rounded-xl transition-all duration-200\"\n                >\n                  <i className=\"fas fa-arrow-up\"></i>\n                  <span>{whisper.upvotes}</span>\n                </button>\n                <button \n                  onClick={() => handleVote('whisper', whisper.id, 'down')}\n                  className=\"vote-btn flex items-center gap-2 text-cool-gray/60 hover:text-lavender bg-lavender/10 px-4 py-2 rounded-xl transition-all duration-200\"\n                >\n                  <i className=\"fas fa-arrow-down\"></i>\n                  <span>{whisper.downvotes}</span>\n                </button>\n                <span className=\"flex items-center gap-2 text-cool-gray/60\">\n                  <i className=\"fas fa-comment\"></i>\n                  <span>{whisper.replies?.length || 0} replies</span>\n                </span>\n              </div>\n              <button \n                onClick={() => handleReport('whisper', whisper.id)}\n                className=\"text-cool-gray/40 hover:text-coral/60 p-2 transition-colors duration-200\"\n              >\n                <i className=\"fas fa-flag\"></i>\n              </button>\n            </div>\n          </div>\n\n          {/* Reply Form */}\n          <div className=\"bg-moonlight/50 rounded-2xl p-6 border border-lavender/20 mb-8\">\n            <h3 className=\"text-white font-semibold mb-4\">Add Your Response</h3>\n            <form onSubmit={handleReplySubmit}>\n              <Textarea\n                value={replyText}\n                onChange={(e) => setReplyText(e.target.value)}\n                className=\"w-full h-24 bg-moonlight border border-lavender/30 rounded-xl px-4 py-3 text-midnight placeholder-cool-gray/60 focus:outline-none focus:border-coral focus:ring-2 focus:ring-coral/20 resize-none mb-4\"\n                placeholder=\"Share your thoughts... (200 characters max)\"\n                maxLength={200}\n              />\n              \n              <div className=\"flex justify-between items-center\">\n                <Input\n                  type=\"text\"\n                  value={replyNickname}\n                  onChange={(e) => setReplyNickname(e.target.value)}\n                  className=\"bg-moonlight border border-lavender/30 rounded-xl px-4 py-2 text-midnight placeholder-cool-gray/60 focus:outline-none focus:border-coral w-40\"\n                  placeholder=\"Nickname (optional)\"\n                  maxLength={50}\n                />\n                <Button \n                  type=\"submit\" \n                  disabled={replyMutation.isPending}\n                  className=\"bg-gradient-to-r from-coral to-lavender text-white px-6 py-2 rounded-xl hover:from-coral/80 hover:to-lavender/80 transition-all duration-200\"\n                >\n                  {replyMutation.isPending ? \"Posting...\" : \"Reply\"}\n                </Button>\n              </div>\n            </form>\n          </div>\n\n          {/* Replies */}\n          <div className=\"space-y-4\">\n            {whisper.replies && whisper.replies.length > 0 ? (\n              whisper.replies.map((reply: any) => (\n                <div key={reply.id} className=\"bg-moonlight/30 rounded-xl p-6 border border-lavender/10 ml-8\">\n                  <div className=\"flex justify-between items-start mb-3\">\n                    <span className=\"text-coral font-medium\">\n                      {reply.nickname || \"Anonymous\"}\n                    </span>\n                    <span className=\"text-cool-gray/60 text-sm\">{formatTimeAgo(reply.createdAt)}</span>\n                  </div>\n                  <p className=\"text-midnight mb-4\">{reply.text}</p>\n                  <div className=\"flex items-center gap-4\">\n                    <button \n                      onClick={() => handleVote('reply', reply.id, 'up')}\n                      className=\"vote-btn flex items-center gap-1 text-cool-gray/60 hover:text-coral transition-colors duration-200\"\n                    >\n                      <i className=\"fas fa-arrow-up\"></i>\n                      <span>{reply.upvotes}</span>\n                    </button>\n                    <button \n                      onClick={() => handleVote('reply', reply.id, 'down')}\n                      className=\"vote-btn flex items-center gap-1 text-cool-gray/60 hover:text-lavender transition-colors duration-200\"\n                    >\n                      <i className=\"fas fa-arrow-down\"></i>\n                      <span>{reply.downvotes}</span>\n                    </button>\n                    <button \n                      onClick={() => handleReport('reply', reply.id)}\n                      className=\"text-cool-gray/40 hover:text-coral/60 transition-colors duration-200\"\n                    >\n                      <i className=\"fas fa-flag text-sm\"></i>\n                    </button>\n                  </div>\n                </div>\n              ))\n            ) : (\n              <div className=\"text-center py-8 ml-8\">\n                <i className=\"fas fa-comment text-2xl text-cool-gray/50 mb-3\"></i>\n                <p className=\"text-cool-gray\">No replies yet. Be the first to respond!</p>\n              </div>\n            )}\n          </div>\n        </div>\n      </section>\n\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":11853},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209}}}